
out/program.elf:     file format elf32-littlearm
out/program.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001101

Program Header:
0x70000001 off    0x00011c68 vaddr 0x1a001c68 paddr 0x1a001c68 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010090 vaddr 0x10000090 paddr 0x10000090 align 2**16
         filesz 0x00000000 memsz 0x00000028 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001c70 memsz 0x00001c70 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001c70 align 2**16
         filesz 0x00000090 memsz 0x00000090 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c68  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  10000000  1a001c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020090  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
  6 .bss          00000028  10000090  10000090  00010090  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020090  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020090  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a001c68  1a001c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020090  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020090  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020090  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020090  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020090  2**2
                  CONTENTS
 17 .noinit       00000000  100000b8  100000b8  00020090  2**2
                  CONTENTS
 18 .debug_info   0001287e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002da8  00000000  00000000  0003290e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    000045e3  00000000  00000000  000356b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000668  00000000  00000000  00039c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 000005f0  00000000  00000000  0003a301  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00009572  00000000  00000000  0003a8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000091a9  00000000  00000000  00043e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001c7d7  00000000  00000000  0004d00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000697e3  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  00069862  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00000f0c  00000000  00000000  0006989c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000090 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a001c68 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000b8 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 program.c
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000720 l     F .text	000000a0 pll_calc_divs
1a0007c0 l     F .text	00000100 pll_get_frac
1a0008c0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000b34 l     F .text	00000022 Chip_Clock_GetDivRate
10000098 l     O .bss	00000008 audio_usb_pll_freq
1a0019ec l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001a58 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000e40 l     F .text	0000002c Chip_UART_GetIndex
1a001aa0 l     O .text	00000008 UART_BClock
1a001aa8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 board.c
1a000fa8 l     F .text	00000044 Board_LED_Init
1a001ab8 l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001ac4 l     O .text	0000000c InitClkStates
1a001ad0 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_datatypes.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0012b4 l     F .text	00000034 gpioObtainPinConfig
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0015b0 l     F .text	00000002 errorOcurred
1a0015b2 l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000300 l       .text	00000000 __CRP_WORD_END__
1a0002fc l       .text	00000000 __CRP_WORD_START__
1a000958 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001634 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
10000048 g     O .data	00000004 keypadRowPins
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a000cc2 g     F .text	00000024 Chip_GPIO_SetDir
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00158c g     F .text	00000024 SysTick_Handler
1a0004c8 g     F .text	0000004c display7SegmentPinConfig_
10000000 g     O .data	00000019 display7SegmentOutputs_
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001c70 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
100000a0 g     O .bss	00000001 estadoActual
1a00018a  w    F .text	00000002 CAN1_IRQHandler
53ff678e g       *ABS*	00000000 __valid_user_code_checksum
1a001c70 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a001678 g     F .text	00000044 TIMER3_IRQHandler
1a000bd6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0016c0 g     F .text	00000000 .hidden __aeabi_uldivmod
100000b8 g       .noinit	00000000 _noinit
100000a4 g     O .bss	00000004 SystemCoreClock
1a000e6c g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000c20 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
100000a8 g     O .bss	00000008 tickCounter
1a001088 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0016f0 g     F .text	000002dc .hidden __udivmoddi4
1a001ab0 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a000498 g     F .text	00000030 display7SegmentWrite_
1a001508 g     F .text	00000078 tickConfig
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a0012e8 g     F .text	00000174 gpioConfig
1a001c68 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001028 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
100000b8 g       .bss	00000000 _ebss
1a0015b4 g     F .text	00000040 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a00090c g     F .text	0000004c Chip_Clock_EnableCrystal
1a001188 g     F .text	000000ee boardConfig
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
10000095 g     O .bss	00000001 pisoseteado
1a0015f4 g     F .text	00000040 TIMER1_IRQHandler
1a0016bc g     F .text	00000002 UART2_IRQHandler
1a000ac8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001276 g     F .text	00000004 sAPI_NullFuncPtr
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1000001c g     O .data	00000008 display7SegmentPins_
1a000bb0 g     F .text	00000026 Chip_Clock_GetBaseClock
10000090 g       .bss	00000000 _bss
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000cc0 g     F .text	00000002 Chip_GPIO_Init
1a001ab4 g     O .text	00000004 OscRateIn
100000b8 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
10000024 g     O .data	00000004 keypadColPins
1a0019cc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00031c g     F .text	0000001c puertaAbriendose
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a000974 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a000300 g     F .text	0000001c ascensorMoviendose
1a0019d0 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0005e8 g     F .text	00000124 main
10000096 g     O .bss	00000001 tiempoTranscurrido
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
10000090 g     O .bss	00000001 ascensorsubiendo
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a000514 g     F .text	00000038 configurarTecladoMatricial
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000be4 g     F .text	0000003c Chip_Clock_EnableOpts
10000092 g     O .bss	00000002 key
1a001b30 g     O .text	00000136 gpioPinsConfig
1a000354 g     F .text	0000000c InicializarMEF
1a000990 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c6c g     F .text	00000054 fpuInit
1a000a48 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00117c g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000360 g     F .text	00000138 ActualizarMEF
1a00127c g     F .text	00000038 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a00145c g     F .text	00000056 gpioWrite
1a001050 g     F .text	00000038 Board_SetupMuxing
1a000ec0 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a001580 g     F .text	0000000c tickRead
100000b0 g     O .bss	00000008 tickRateMS
1a00018a  w    F .text	00000002 ETH_IRQHandler
1000004c g     O .data	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100000b8 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a001000 g     F .text	00000028 Board_Debug_Init
1a00054c g     F .text	0000009c leerTecladoMatricial
10000090 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000ce8 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001100 g     F .text	0000007c ResetISR
1a00070c g     F .text	00000014 SystemCoreClockUpdate
10000094 g     O .bss	00000001 pisoactual
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0019cc  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0016be g     F .text	00000002 UART3_IRQHandler
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1a0014b2 g     F .text	00000054 gpioRead
1a000338 g     F .text	0000001c puertaCerrandose
10000028 g     O .data	00000020 keypadKeys
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000fec g     F .text	00000014 Board_UART_Init
1a000b58 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a0010f4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 01 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 8e 67 ff 53     }............g.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	8d 15 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a b5 15 00 1a f5 15 00 1a 35 16 00 1a     ............5...
1a00007c:	79 16 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     y...............
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a bd 01 00 1a 8b 01 00 1a bd 16 00 1a     ................
1a0000ac:	bf 16 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a001c70 	.word	0x1a001c70
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000090 	.word	0x00000090
1a000120:	1a001c70 	.word	0x1a001c70
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001c70 	.word	0x1a001c70
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001c70 	.word	0x1a001c70
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001c70 	.word	0x1a001c70
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000090 	.word	0x10000090
1a000154:	00000028 	.word	0x00000028
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	6804      	ldr	r4, [r0, #0]
1a000196:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000198:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a00019a:	3004      	adds	r0, #4
1a00019c:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b4:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr

1a0001bc <UART0_IRQHandler>:
/*==================[ISR external functions definition]======================*/

__attribute__ ((section(".after_vectors")))

/* 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24) */
void UART0_IRQHandler(void){
1a0001bc:	4770      	bx	lr
1a0001be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ascensorMoviendose>:
   gpioWrite( LEDG, ON );
   gpioWrite( LED1, OFF );
   gpioWrite( LED2, OFF );
}

void ascensorMoviendose( void ) {
1a000300:	b508      	push	{r3, lr}
   gpioWrite( LEDG, ON );
1a000302:	2101      	movs	r1, #1
1a000304:	2029      	movs	r0, #41	; 0x29
1a000306:	f001 f8a9 	bl	1a00145c <gpioWrite>
   gpioWrite( LED1, OFF );
1a00030a:	2100      	movs	r1, #0
1a00030c:	202b      	movs	r0, #43	; 0x2b
1a00030e:	f001 f8a5 	bl	1a00145c <gpioWrite>
   gpioWrite( LED2, OFF );
1a000312:	2100      	movs	r1, #0
1a000314:	202c      	movs	r0, #44	; 0x2c
1a000316:	f001 f8a1 	bl	1a00145c <gpioWrite>
1a00031a:	bd08      	pop	{r3, pc}

1a00031c <puertaAbriendose>:
}
void puertaAbriendose( void ) {
1a00031c:	b508      	push	{r3, lr}
   gpioWrite( LEDG, OFF );
1a00031e:	2100      	movs	r1, #0
1a000320:	2029      	movs	r0, #41	; 0x29
1a000322:	f001 f89b 	bl	1a00145c <gpioWrite>
   gpioWrite( LED1, ON );
1a000326:	2101      	movs	r1, #1
1a000328:	202b      	movs	r0, #43	; 0x2b
1a00032a:	f001 f897 	bl	1a00145c <gpioWrite>
   gpioWrite( LED2, OFF );
1a00032e:	2100      	movs	r1, #0
1a000330:	202c      	movs	r0, #44	; 0x2c
1a000332:	f001 f893 	bl	1a00145c <gpioWrite>
1a000336:	bd08      	pop	{r3, pc}

1a000338 <puertaCerrandose>:
}

void puertaCerrandose( void ) {
1a000338:	b508      	push	{r3, lr}
   gpioWrite( LEDG, OFF );
1a00033a:	2100      	movs	r1, #0
1a00033c:	2029      	movs	r0, #41	; 0x29
1a00033e:	f001 f88d 	bl	1a00145c <gpioWrite>
   gpioWrite( LED1, OFF );
1a000342:	2100      	movs	r1, #0
1a000344:	202b      	movs	r0, #43	; 0x2b
1a000346:	f001 f889 	bl	1a00145c <gpioWrite>
   gpioWrite( LED2, ON );
1a00034a:	2101      	movs	r1, #1
1a00034c:	202c      	movs	r0, #44	; 0x2c
1a00034e:	f001 f885 	bl	1a00145c <gpioWrite>
1a000352:	bd08      	pop	{r3, pc}

1a000354 <InicializarMEF>:
   gpioWrite( LED3, ON );
   gpioWrite( LED2, OFF );
}

void InicializarMEF( void ) {
   estadoActual =EN_ESPERA;
1a000354:	2200      	movs	r2, #0
1a000356:	4b01      	ldr	r3, [pc, #4]	; (1a00035c <InicializarMEF+0x8>)
1a000358:	701a      	strb	r2, [r3, #0]
1a00035a:	4770      	bx	lr
1a00035c:	100000a0 	.word	0x100000a0

1a000360 <ActualizarMEF>:
}
void ActualizarMEF( void ) {
1a000360:	b508      	push	{r3, lr}
   switch(estadoActual){
1a000362:	4b48      	ldr	r3, [pc, #288]	; (1a000484 <ActualizarMEF+0x124>)
1a000364:	781b      	ldrb	r3, [r3, #0]
1a000366:	2b09      	cmp	r3, #9
1a000368:	f200 8089 	bhi.w	1a00047e <ActualizarMEF+0x11e>
1a00036c:	e8df f003 	tbb	[pc, r3]
1a000370:	3b2f1b05 	.word	0x3b2f1b05
1a000374:	896e594b 	.word	0x896e594b
1a000378:	8979      	.short	0x8979
      case EN_ESPERA:
      //uartWriteString(UART_USB, texto);
       if (!gpioRead(TEC2)){
1a00037a:	2025      	movs	r0, #37	; 0x25
1a00037c:	f001 f899 	bl	1a0014b2 <gpioRead>
1a000380:	b928      	cbnz	r0, 1a00038e <ActualizarMEF+0x2e>
         ascensorsubiendo=1;
1a000382:	2201      	movs	r2, #1
1a000384:	4b40      	ldr	r3, [pc, #256]	; (1a000488 <ActualizarMEF+0x128>)
1a000386:	701a      	strb	r2, [r3, #0]
         estadoActual = ABRIENDO_PUERTA;
1a000388:	2203      	movs	r2, #3
1a00038a:	4b3e      	ldr	r3, [pc, #248]	; (1a000484 <ActualizarMEF+0x124>)
1a00038c:	701a      	strb	r2, [r3, #0]
       }
       if (!gpioRead(TEC3)){
1a00038e:	2026      	movs	r0, #38	; 0x26
1a000390:	f001 f88f 	bl	1a0014b2 <gpioRead>
1a000394:	2800      	cmp	r0, #0
1a000396:	d174      	bne.n	1a000482 <ActualizarMEF+0x122>
         estadoActual = ABRIENDO_PUERTA;
1a000398:	2203      	movs	r2, #3
1a00039a:	4b3a      	ldr	r3, [pc, #232]	; (1a000484 <ActualizarMEF+0x124>)
1a00039c:	701a      	strb	r2, [r3, #0]
         ascensorsubiendo=0;
1a00039e:	2200      	movs	r2, #0
1a0003a0:	4b39      	ldr	r3, [pc, #228]	; (1a000488 <ActualizarMEF+0x128>)
1a0003a2:	701a      	strb	r2, [r3, #0]
1a0003a4:	bd08      	pop	{r3, pc}
       }
         
      break;
      case SUBIENDO:
       //uartWriteString(UART_USB, texto5);
       ascensorMoviendose();
1a0003a6:	f7ff ffab 	bl	1a000300 <ascensorMoviendose>
       if( tiempoTranscurrido == 2 ){
1a0003aa:	4b38      	ldr	r3, [pc, #224]	; (1a00048c <ActualizarMEF+0x12c>)
1a0003ac:	781b      	ldrb	r3, [r3, #0]
1a0003ae:	2b02      	cmp	r3, #2
1a0003b0:	d167      	bne.n	1a000482 <ActualizarMEF+0x122>
          if (pisoactual==pisoseteado){
1a0003b2:	4b37      	ldr	r3, [pc, #220]	; (1a000490 <ActualizarMEF+0x130>)
1a0003b4:	781a      	ldrb	r2, [r3, #0]
1a0003b6:	4b37      	ldr	r3, [pc, #220]	; (1a000494 <ActualizarMEF+0x134>)
1a0003b8:	781b      	ldrb	r3, [r3, #0]
1a0003ba:	429a      	cmp	r2, r3
1a0003bc:	d003      	beq.n	1a0003c6 <ActualizarMEF+0x66>
             estadoActual = ABRIENDO_PUERTA;
          }      
            tiempoTranscurrido = 0;
1a0003be:	2200      	movs	r2, #0
1a0003c0:	4b32      	ldr	r3, [pc, #200]	; (1a00048c <ActualizarMEF+0x12c>)
1a0003c2:	701a      	strb	r2, [r3, #0]
1a0003c4:	bd08      	pop	{r3, pc}
             estadoActual = ABRIENDO_PUERTA;
1a0003c6:	2203      	movs	r2, #3
1a0003c8:	4b2e      	ldr	r3, [pc, #184]	; (1a000484 <ActualizarMEF+0x124>)
1a0003ca:	701a      	strb	r2, [r3, #0]
1a0003cc:	e7f7      	b.n	1a0003be <ActualizarMEF+0x5e>
       }
      break;
      case BAJANDO:
       //uartWriteString(UART_USB, texto6);
       ascensorMoviendose();
1a0003ce:	f7ff ff97 	bl	1a000300 <ascensorMoviendose>
       if (pisoactual==pisoseteado){
1a0003d2:	4b2f      	ldr	r3, [pc, #188]	; (1a000490 <ActualizarMEF+0x130>)
1a0003d4:	781a      	ldrb	r2, [r3, #0]
1a0003d6:	4b2f      	ldr	r3, [pc, #188]	; (1a000494 <ActualizarMEF+0x134>)
1a0003d8:	781b      	ldrb	r3, [r3, #0]
1a0003da:	429a      	cmp	r2, r3
1a0003dc:	d151      	bne.n	1a000482 <ActualizarMEF+0x122>
          estadoActual = ABRIENDO_PUERTA;
1a0003de:	2203      	movs	r2, #3
1a0003e0:	4b28      	ldr	r3, [pc, #160]	; (1a000484 <ActualizarMEF+0x124>)
1a0003e2:	701a      	strb	r2, [r3, #0]
1a0003e4:	bd08      	pop	{r3, pc}
        }
         
      break;
      case ABRIENDO_PUERTA:
       //uartWriteString(UART_USB, texto1);
        puertaAbriendose();
1a0003e6:	f7ff ff99 	bl	1a00031c <puertaAbriendose>
        tiempoTranscurrido++;
1a0003ea:	4a28      	ldr	r2, [pc, #160]	; (1a00048c <ActualizarMEF+0x12c>)
1a0003ec:	7813      	ldrb	r3, [r2, #0]
1a0003ee:	3301      	adds	r3, #1
1a0003f0:	b2db      	uxtb	r3, r3
1a0003f2:	7013      	strb	r3, [r2, #0]
        if( tiempoTranscurrido == 2 ){
1a0003f4:	2b02      	cmp	r3, #2
1a0003f6:	d144      	bne.n	1a000482 <ActualizarMEF+0x122>
            estadoActual = PUERTA_ABIERTA;
1a0003f8:	2204      	movs	r2, #4
1a0003fa:	4b22      	ldr	r3, [pc, #136]	; (1a000484 <ActualizarMEF+0x124>)
1a0003fc:	701a      	strb	r2, [r3, #0]
            tiempoTranscurrido = 0;}
1a0003fe:	2200      	movs	r2, #0
1a000400:	4b22      	ldr	r3, [pc, #136]	; (1a00048c <ActualizarMEF+0x12c>)
1a000402:	701a      	strb	r2, [r3, #0]
1a000404:	bd08      	pop	{r3, pc}
      break;
      case PUERTA_ABIERTA:
       //uartWriteString(UART_USB, texto2);
        tiempoTranscurrido++;
1a000406:	4a21      	ldr	r2, [pc, #132]	; (1a00048c <ActualizarMEF+0x12c>)
1a000408:	7813      	ldrb	r3, [r2, #0]
1a00040a:	3301      	adds	r3, #1
1a00040c:	b2db      	uxtb	r3, r3
1a00040e:	7013      	strb	r3, [r2, #0]
        if( tiempoTranscurrido == 2 ){
1a000410:	2b02      	cmp	r3, #2
1a000412:	d136      	bne.n	1a000482 <ActualizarMEF+0x122>
            estadoActual = CERRANDO_PUERTA;
1a000414:	2205      	movs	r2, #5
1a000416:	4b1b      	ldr	r3, [pc, #108]	; (1a000484 <ActualizarMEF+0x124>)
1a000418:	701a      	strb	r2, [r3, #0]
            tiempoTranscurrido = 0;
1a00041a:	2200      	movs	r2, #0
1a00041c:	4b1b      	ldr	r3, [pc, #108]	; (1a00048c <ActualizarMEF+0x12c>)
1a00041e:	701a      	strb	r2, [r3, #0]
1a000420:	bd08      	pop	{r3, pc}
        }    
      break;
      case CERRANDO_PUERTA:
       //uartWriteString(UART_USB, texto3);
        puertaCerrandose();
1a000422:	f7ff ff89 	bl	1a000338 <puertaCerrandose>
        tiempoTranscurrido++;
1a000426:	4a19      	ldr	r2, [pc, #100]	; (1a00048c <ActualizarMEF+0x12c>)
1a000428:	7813      	ldrb	r3, [r2, #0]
1a00042a:	3301      	adds	r3, #1
1a00042c:	b2db      	uxtb	r3, r3
1a00042e:	7013      	strb	r3, [r2, #0]
        if( tiempoTranscurrido == 2 ){
1a000430:	2b02      	cmp	r3, #2
1a000432:	d126      	bne.n	1a000482 <ActualizarMEF+0x122>
           while (!gpioRead(TEC1)){}
1a000434:	2024      	movs	r0, #36	; 0x24
1a000436:	f001 f83c 	bl	1a0014b2 <gpioRead>
1a00043a:	2800      	cmp	r0, #0
1a00043c:	d0fa      	beq.n	1a000434 <ActualizarMEF+0xd4>
           estadoActual = PUERTA_CERRADA;
1a00043e:	2206      	movs	r2, #6
1a000440:	4b10      	ldr	r3, [pc, #64]	; (1a000484 <ActualizarMEF+0x124>)
1a000442:	701a      	strb	r2, [r3, #0]
           tiempoTranscurrido = 0;
1a000444:	2200      	movs	r2, #0
1a000446:	4b11      	ldr	r3, [pc, #68]	; (1a00048c <ActualizarMEF+0x12c>)
1a000448:	701a      	strb	r2, [r3, #0]
1a00044a:	bd08      	pop	{r3, pc}
        }
      break;
      case PUERTA_CERRADA:
       //uartWriteString(UART_USB, texto4);
       if(ascensorsubiendo){
1a00044c:	4b0e      	ldr	r3, [pc, #56]	; (1a000488 <ActualizarMEF+0x128>)
1a00044e:	781b      	ldrb	r3, [r3, #0]
1a000450:	b11b      	cbz	r3, 1a00045a <ActualizarMEF+0xfa>
       estadoActual = SUBIENDO;
1a000452:	2201      	movs	r2, #1
1a000454:	4b0b      	ldr	r3, [pc, #44]	; (1a000484 <ActualizarMEF+0x124>)
1a000456:	701a      	strb	r2, [r3, #0]
1a000458:	bd08      	pop	{r3, pc}
       }
       else{ estadoActual = BAJANDO; }
1a00045a:	2202      	movs	r2, #2
1a00045c:	4b09      	ldr	r3, [pc, #36]	; (1a000484 <ActualizarMEF+0x124>)
1a00045e:	701a      	strb	r2, [r3, #0]
1a000460:	bd08      	pop	{r3, pc}
      case MODO_CONFIGURACION:
         
      break;
      case LEER_PISO:
       //pisoseteado = lectura del teclado matricial   
       if(pisoactual<pisoseteado){
1a000462:	4b0b      	ldr	r3, [pc, #44]	; (1a000490 <ActualizarMEF+0x130>)
1a000464:	781a      	ldrb	r2, [r3, #0]
1a000466:	4b0b      	ldr	r3, [pc, #44]	; (1a000494 <ActualizarMEF+0x134>)
1a000468:	781b      	ldrb	r3, [r3, #0]
1a00046a:	429a      	cmp	r2, r3
1a00046c:	d203      	bcs.n	1a000476 <ActualizarMEF+0x116>
       estadoActual = SUBIENDO;
1a00046e:	2201      	movs	r2, #1
1a000470:	4b04      	ldr	r3, [pc, #16]	; (1a000484 <ActualizarMEF+0x124>)
1a000472:	701a      	strb	r2, [r3, #0]
1a000474:	bd08      	pop	{r3, pc}
       }
       else {estadoActual = BAJANDO;}
1a000476:	2202      	movs	r2, #2
1a000478:	4b02      	ldr	r3, [pc, #8]	; (1a000484 <ActualizarMEF+0x124>)
1a00047a:	701a      	strb	r2, [r3, #0]
1a00047c:	bd08      	pop	{r3, pc}
      break;
      case ALARMA_P_ABIERTA:
         
      break;
      default:
         InicializarMEF();
1a00047e:	f7ff ff69 	bl	1a000354 <InicializarMEF>
1a000482:	bd08      	pop	{r3, pc}
1a000484:	100000a0 	.word	0x100000a0
1a000488:	10000090 	.word	0x10000090
1a00048c:	10000096 	.word	0x10000096
1a000490:	10000094 	.word	0x10000094
1a000494:	10000095 	.word	0x10000095

1a000498 <display7SegmentWrite_>:
   0b00111110, // U

   0b10000000  // .
};

void display7SegmentWrite_( uint8_t symbolIndex ){
1a000498:	b538      	push	{r3, r4, r5, lr}
1a00049a:	4605      	mov	r5, r0

   uint8_t i = 0;

   for(i=0;i<=7;i++)
1a00049c:	2400      	movs	r4, #0
1a00049e:	e00b      	b.n	1a0004b8 <display7SegmentWrite_+0x20>
#ifdef ANODO_COMUN
        gpioWrite( display7SegmentPins_[i], !(display7SegmentOutputs_[symbolIndex] & (1<<i)) );
#elif defined(CATODO_COMUN)
        gpioWrite( display7SegmentPins_[i], (display7SegmentOutputs_[symbolIndex] & (1<<i)) );
1a0004a0:	4b07      	ldr	r3, [pc, #28]	; (1a0004c0 <display7SegmentWrite_+0x28>)
1a0004a2:	5759      	ldrsb	r1, [r3, r5]
1a0004a4:	2301      	movs	r3, #1
1a0004a6:	40a3      	lsls	r3, r4
1a0004a8:	4019      	ands	r1, r3
1a0004aa:	b2c9      	uxtb	r1, r1
1a0004ac:	4b05      	ldr	r3, [pc, #20]	; (1a0004c4 <display7SegmentWrite_+0x2c>)
1a0004ae:	5d18      	ldrb	r0, [r3, r4]
1a0004b0:	f000 ffd4 	bl	1a00145c <gpioWrite>
   for(i=0;i<=7;i++)
1a0004b4:	3401      	adds	r4, #1
1a0004b6:	b2e4      	uxtb	r4, r4
1a0004b8:	2c07      	cmp	r4, #7
1a0004ba:	d9f1      	bls.n	1a0004a0 <display7SegmentWrite_+0x8>
#endif   
}
1a0004bc:	bd38      	pop	{r3, r4, r5, pc}
1a0004be:	bf00      	nop
1a0004c0:	10000000 	.word	0x10000000
1a0004c4:	1000001c 	.word	0x1000001c

1a0004c8 <display7SegmentPinConfig_>:

void display7SegmentPinConfig_( void ){
1a0004c8:	b510      	push	{r4, lr}
   gpioConfig( display7SegmentPins_[0], GPIO_OUTPUT );
1a0004ca:	4c11      	ldr	r4, [pc, #68]	; (1a000510 <display7SegmentPinConfig_+0x48>)
1a0004cc:	2101      	movs	r1, #1
1a0004ce:	7820      	ldrb	r0, [r4, #0]
1a0004d0:	f000 ff0a 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[1], GPIO_OUTPUT );
1a0004d4:	2101      	movs	r1, #1
1a0004d6:	7860      	ldrb	r0, [r4, #1]
1a0004d8:	f000 ff06 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[2], GPIO_OUTPUT );
1a0004dc:	2101      	movs	r1, #1
1a0004de:	78a0      	ldrb	r0, [r4, #2]
1a0004e0:	f000 ff02 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[3], GPIO_OUTPUT );
1a0004e4:	2101      	movs	r1, #1
1a0004e6:	78e0      	ldrb	r0, [r4, #3]
1a0004e8:	f000 fefe 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[4], GPIO_OUTPUT );
1a0004ec:	2101      	movs	r1, #1
1a0004ee:	7920      	ldrb	r0, [r4, #4]
1a0004f0:	f000 fefa 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[5], GPIO_OUTPUT );
1a0004f4:	2101      	movs	r1, #1
1a0004f6:	7960      	ldrb	r0, [r4, #5]
1a0004f8:	f000 fef6 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[6], GPIO_OUTPUT );
1a0004fc:	2101      	movs	r1, #1
1a0004fe:	79a0      	ldrb	r0, [r4, #6]
1a000500:	f000 fef2 	bl	1a0012e8 <gpioConfig>
   gpioConfig( display7SegmentPins_[7], GPIO_OUTPUT );
1a000504:	2101      	movs	r1, #1
1a000506:	79e0      	ldrb	r0, [r4, #7]
1a000508:	f000 feee 	bl	1a0012e8 <gpioConfig>
1a00050c:	bd10      	pop	{r4, pc}
1a00050e:	bf00      	nop
1a000510:	1000001c 	.word	0x1000001c

1a000514 <configurarTecladoMatricial>:
                            0x0e,    0, 0x0f, 0x0d
                          };
                          
                          

void configurarTecladoMatricial( void ){
1a000514:	b510      	push	{r4, lr}
   
   uint8_t i = 0;
   
   // Configure Rows as Outputs
   for( i=0; i<4; i++ ){
1a000516:	2400      	movs	r4, #0
1a000518:	e006      	b.n	1a000528 <configurarTecladoMatricial+0x14>
      gpioConfig( keypadRowPins[i], GPIO_OUTPUT );
1a00051a:	2101      	movs	r1, #1
1a00051c:	4b09      	ldr	r3, [pc, #36]	; (1a000544 <configurarTecladoMatricial+0x30>)
1a00051e:	5d18      	ldrb	r0, [r3, r4]
1a000520:	f000 fee2 	bl	1a0012e8 <gpioConfig>
   for( i=0; i<4; i++ ){
1a000524:	3401      	adds	r4, #1
1a000526:	b2e4      	uxtb	r4, r4
1a000528:	2c03      	cmp	r4, #3
1a00052a:	d9f6      	bls.n	1a00051a <configurarTecladoMatricial+0x6>
1a00052c:	2400      	movs	r4, #0
1a00052e:	e006      	b.n	1a00053e <configurarTecladoMatricial+0x2a>
   }

   // Configure Columns as Inputs with pull-up resistors enable
   for( i=0; i<4; i++ ){
      gpioConfig( keypadColPins[i], GPIO_INPUT_PULLUP );
1a000530:	2102      	movs	r1, #2
1a000532:	4b05      	ldr	r3, [pc, #20]	; (1a000548 <configurarTecladoMatricial+0x34>)
1a000534:	5d18      	ldrb	r0, [r3, r4]
1a000536:	f000 fed7 	bl	1a0012e8 <gpioConfig>
   for( i=0; i<4; i++ ){
1a00053a:	3401      	adds	r4, #1
1a00053c:	b2e4      	uxtb	r4, r4
1a00053e:	2c03      	cmp	r4, #3
1a000540:	d9f6      	bls.n	1a000530 <configurarTecladoMatricial+0x1c>
   }
}
1a000542:	bd10      	pop	{r4, pc}
1a000544:	10000048 	.word	0x10000048
1a000548:	10000024 	.word	0x10000024

1a00054c <leerTecladoMatricial>:


/* Devuelve TRUE si hay alguna tecla presionada o FALSE (0) en caso contrario.
 * Si hay tecla presionada guarda el valor en la variable key.
 * El valor es un numero de indice entre 0 y 15 */
bool_t leerTecladoMatricial( void ){
1a00054c:	b570      	push	{r4, r5, r6, lr}

   uint16_t r = 0; // Rows
   uint16_t c = 0; // Columns

   // Poner todas las filas en estado BAJO
   for( r=0; r<4; r++ ){
1a00054e:	2400      	movs	r4, #0
1a000550:	e006      	b.n	1a000560 <leerTecladoMatricial+0x14>
	  gpioWrite( keypadRowPins[r], LOW );
1a000552:	2100      	movs	r1, #0
1a000554:	4b21      	ldr	r3, [pc, #132]	; (1a0005dc <leerTecladoMatricial+0x90>)
1a000556:	5d18      	ldrb	r0, [r3, r4]
1a000558:	f000 ff80 	bl	1a00145c <gpioWrite>
   for( r=0; r<4; r++ ){
1a00055c:	3401      	adds	r4, #1
1a00055e:	b2a4      	uxth	r4, r4
1a000560:	2c03      	cmp	r4, #3
1a000562:	d9f6      	bls.n	1a000552 <leerTecladoMatricial+0x6>
1a000564:	2500      	movs	r5, #0
1a000566:	e028      	b.n	1a0005ba <leerTecladoMatricial+0x6e>

         delay( 50 ); // Anti-rebotes de 50 ms

         // Poner todas las filas en estado ALTO excepto la primera
         for( r=1; r<4; r++ ){
            gpioWrite( keypadRowPins[r], HIGH );
1a000568:	2101      	movs	r1, #1
1a00056a:	4b1c      	ldr	r3, [pc, #112]	; (1a0005dc <leerTecladoMatricial+0x90>)
1a00056c:	5d18      	ldrb	r0, [r3, r4]
1a00056e:	f000 ff75 	bl	1a00145c <gpioWrite>
         for( r=1; r<4; r++ ){
1a000572:	3401      	adds	r4, #1
1a000574:	b2a4      	uxth	r4, r4
1a000576:	2c03      	cmp	r4, #3
1a000578:	d9f6      	bls.n	1a000568 <leerTecladoMatricial+0x1c>
1a00057a:	2400      	movs	r4, #0
         }

         // Buscar que tecla esta presionada
         for( r=0; r<4; r++ ){
1a00057c:	2c03      	cmp	r4, #3
1a00057e:	d81a      	bhi.n	1a0005b6 <leerTecladoMatricial+0x6a>

            // Poner la Fila[r-1] en estado ALTO y la Fila[r] en estado BAJO
            if( r>0 ){ // Exceptua el indice negativo en el array
1a000580:	b12c      	cbz	r4, 1a00058e <leerTecladoMatricial+0x42>
               gpioWrite( keypadRowPins[r-1], HIGH );
1a000582:	1e63      	subs	r3, r4, #1
1a000584:	2101      	movs	r1, #1
1a000586:	4a15      	ldr	r2, [pc, #84]	; (1a0005dc <leerTecladoMatricial+0x90>)
1a000588:	5cd0      	ldrb	r0, [r2, r3]
1a00058a:	f000 ff67 	bl	1a00145c <gpioWrite>
            }
            gpioWrite( keypadRowPins[r], LOW );
1a00058e:	2100      	movs	r1, #0
1a000590:	4b12      	ldr	r3, [pc, #72]	; (1a0005dc <leerTecladoMatricial+0x90>)
1a000592:	5d18      	ldrb	r0, [r3, r4]
1a000594:	f000 ff62 	bl	1a00145c <gpioWrite>

            // Chequear la Columna[c] en Fila[r] para buscar si la tecla esta presionada
            // Si dicha tecla esta oresionada (en estado BAJO) entonces retorna
            // graba la tecla en key y retorna TRUE
            if( !gpioRead( keypadColPins[c] ) ){
1a000598:	4b11      	ldr	r3, [pc, #68]	; (1a0005e0 <leerTecladoMatricial+0x94>)
1a00059a:	5d98      	ldrb	r0, [r3, r6]
1a00059c:	f000 ff89 	bl	1a0014b2 <gpioRead>
1a0005a0:	b110      	cbz	r0, 1a0005a8 <leerTecladoMatricial+0x5c>
         for( r=0; r<4; r++ ){
1a0005a2:	3401      	adds	r4, #1
1a0005a4:	b2a4      	uxth	r4, r4
1a0005a6:	e7e9      	b.n	1a00057c <leerTecladoMatricial+0x30>
               retVal = TRUE;
               key = r * 4 + c;
1a0005a8:	00a4      	lsls	r4, r4, #2
1a0005aa:	b2a4      	uxth	r4, r4
1a0005ac:	442c      	add	r4, r5
1a0005ae:	4b0d      	ldr	r3, [pc, #52]	; (1a0005e4 <leerTecladoMatricial+0x98>)
1a0005b0:	801c      	strh	r4, [r3, #0]
                  r0  0  1  2  3  4
                  r1  5  6  7  8  9   Si se presiona la tecla r[i] c[j]:
                  r2 10 11 12 13 14   valor = (i) * cantidadDeColumnas + (j)
                  r3 15 16 17 18 19
               */
               return retVal;
1a0005b2:	2001      	movs	r0, #1
1a0005b4:	bd70      	pop	{r4, r5, r6, pc}
   for( c=0; c<4; c++ ){
1a0005b6:	3501      	adds	r5, #1
1a0005b8:	b2ad      	uxth	r5, r5
1a0005ba:	2d03      	cmp	r5, #3
1a0005bc:	d80c      	bhi.n	1a0005d8 <leerTecladoMatricial+0x8c>
      if( !gpioRead( keypadColPins[c] ) ){
1a0005be:	462e      	mov	r6, r5
1a0005c0:	4b07      	ldr	r3, [pc, #28]	; (1a0005e0 <leerTecladoMatricial+0x94>)
1a0005c2:	5d58      	ldrb	r0, [r3, r5]
1a0005c4:	f000 ff75 	bl	1a0014b2 <gpioRead>
1a0005c8:	2800      	cmp	r0, #0
1a0005ca:	d1f4      	bne.n	1a0005b6 <leerTecladoMatricial+0x6a>
         delay( 50 ); // Anti-rebotes de 50 ms
1a0005cc:	2032      	movs	r0, #50	; 0x32
1a0005ce:	2100      	movs	r1, #0
1a0005d0:	f000 fe54 	bl	1a00127c <delay>
         for( r=1; r<4; r++ ){
1a0005d4:	2401      	movs	r4, #1
1a0005d6:	e7ce      	b.n	1a000576 <leerTecladoMatricial+0x2a>
            }
         }

      }
   }
   return retVal;
1a0005d8:	2000      	movs	r0, #0
}
1a0005da:	bd70      	pop	{r4, r5, r6, pc}
1a0005dc:	10000048 	.word	0x10000048
1a0005e0:	10000024 	.word	0x10000024
1a0005e4:	10000092 	.word	0x10000092

1a0005e8 <main>:
   

int main(void){
1a0005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   
   boardConfig();
1a0005ea:	f000 fdcd 	bl	1a001188 <boardConfig>
   gpioConfig(GPIO6, GPIO_OUTPUT);   // catodo comun del primer digito
1a0005ee:	2101      	movs	r1, #1
1a0005f0:	201d      	movs	r0, #29
1a0005f2:	f000 fe79 	bl	1a0012e8 <gpioConfig>
   gpioConfig(LCD1, GPIO_OUTPUT);    // " del segundo digito
1a0005f6:	2101      	movs	r1, #1
1a0005f8:	2010      	movs	r0, #16
1a0005fa:	f000 fe75 	bl	1a0012e8 <gpioConfig>
   gpioConfig(LCD2, GPIO_OUTPUT);    // " del tercer digito
1a0005fe:	2101      	movs	r1, #1
1a000600:	2011      	movs	r0, #17
1a000602:	f000 fe71 	bl	1a0012e8 <gpioConfig>
   gpioConfig(LCD3, GPIO_OUTPUT);   // " del cuarto digito
1a000606:	2101      	movs	r1, #1
1a000608:	2012      	movs	r0, #18
1a00060a:	f000 fe6d 	bl	1a0012e8 <gpioConfig>
   display7SegmentPinConfig_();    
1a00060e:	f7ff ff5b 	bl	1a0004c8 <display7SegmentPinConfig_>
   configurarTecladoMatricial(); // Configurar teclado matricial
1a000612:	f7ff ff7f 	bl	1a000514 <configurarTecladoMatricial>
   InicializarMEF();
1a000616:	f7ff fe9d 	bl	1a000354 <InicializarMEF>
   uint8_t k = 0;  //indice primer display 
   uint8_t i = 0;  //indice segundo display
   uint8_t m = 0;  //indice tercer display 
   uint8_t n = 0;  //indice cuarto display
1a00061a:	2400      	movs	r4, #0
   uint8_t m = 0;  //indice tercer display 
1a00061c:	4626      	mov	r6, r4
   uint8_t i = 0;  //indice segundo display
1a00061e:	4625      	mov	r5, r4
   uint8_t k = 0;  //indice primer display 
1a000620:	4627      	mov	r7, r4
1a000622:	e006      	b.n	1a000632 <main+0x4a>
         n = keypadKeys[key];
         //uartWriteByte( UART_USB, asciiKeypadKeys[key] );
         
      }

    ActualizarMEF();
1a000624:	f7ff fe9c 	bl	1a000360 <ActualizarMEF>
    delay(500);
1a000628:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00062c:	2100      	movs	r1, #0
1a00062e:	f000 fe25 	bl	1a00127c <delay>
        display7SegmentWrite_(k);    // primer display
1a000632:	4638      	mov	r0, r7
1a000634:	f7ff ff30 	bl	1a000498 <display7SegmentWrite_>
        gpioWrite(GPIO6,OFF);
1a000638:	2100      	movs	r1, #0
1a00063a:	201d      	movs	r0, #29
1a00063c:	f000 ff0e 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD1,ON);
1a000640:	2101      	movs	r1, #1
1a000642:	2010      	movs	r0, #16
1a000644:	f000 ff0a 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD2,ON);
1a000648:	2101      	movs	r1, #1
1a00064a:	2011      	movs	r0, #17
1a00064c:	f000 ff06 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD3,ON);
1a000650:	2101      	movs	r1, #1
1a000652:	2012      	movs	r0, #18
1a000654:	f000 ff02 	bl	1a00145c <gpioWrite>
        delay(5);
1a000658:	2005      	movs	r0, #5
1a00065a:	2100      	movs	r1, #0
1a00065c:	f000 fe0e 	bl	1a00127c <delay>
        display7SegmentWrite_(i);    // segundo display
1a000660:	4628      	mov	r0, r5
1a000662:	f7ff ff19 	bl	1a000498 <display7SegmentWrite_>
        gpioWrite(GPIO6, ON);
1a000666:	2101      	movs	r1, #1
1a000668:	201d      	movs	r0, #29
1a00066a:	f000 fef7 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD1,OFF);
1a00066e:	2100      	movs	r1, #0
1a000670:	2010      	movs	r0, #16
1a000672:	f000 fef3 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD2,ON);
1a000676:	2101      	movs	r1, #1
1a000678:	2011      	movs	r0, #17
1a00067a:	f000 feef 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD3,ON);
1a00067e:	2101      	movs	r1, #1
1a000680:	2012      	movs	r0, #18
1a000682:	f000 feeb 	bl	1a00145c <gpioWrite>
        delay(5);
1a000686:	2005      	movs	r0, #5
1a000688:	2100      	movs	r1, #0
1a00068a:	f000 fdf7 	bl	1a00127c <delay>
        display7SegmentWrite_(m);    // tercer display
1a00068e:	4630      	mov	r0, r6
1a000690:	f7ff ff02 	bl	1a000498 <display7SegmentWrite_>
        gpioWrite(GPIO6,ON);
1a000694:	2101      	movs	r1, #1
1a000696:	201d      	movs	r0, #29
1a000698:	f000 fee0 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD1,ON);
1a00069c:	2101      	movs	r1, #1
1a00069e:	2010      	movs	r0, #16
1a0006a0:	f000 fedc 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD2,OFF);
1a0006a4:	2100      	movs	r1, #0
1a0006a6:	2011      	movs	r0, #17
1a0006a8:	f000 fed8 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD3,ON);
1a0006ac:	2101      	movs	r1, #1
1a0006ae:	2012      	movs	r0, #18
1a0006b0:	f000 fed4 	bl	1a00145c <gpioWrite>
        delay(5);
1a0006b4:	2005      	movs	r0, #5
1a0006b6:	2100      	movs	r1, #0
1a0006b8:	f000 fde0 	bl	1a00127c <delay>
        display7SegmentWrite_(n);    // cuarto display
1a0006bc:	4620      	mov	r0, r4
1a0006be:	f7ff feeb 	bl	1a000498 <display7SegmentWrite_>
        gpioWrite(GPIO6,ON);
1a0006c2:	2101      	movs	r1, #1
1a0006c4:	201d      	movs	r0, #29
1a0006c6:	f000 fec9 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD1,ON);
1a0006ca:	2101      	movs	r1, #1
1a0006cc:	2010      	movs	r0, #16
1a0006ce:	f000 fec5 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD2,ON);
1a0006d2:	2101      	movs	r1, #1
1a0006d4:	2011      	movs	r0, #17
1a0006d6:	f000 fec1 	bl	1a00145c <gpioWrite>
        gpioWrite(LCD3,OFF);
1a0006da:	2100      	movs	r1, #0
1a0006dc:	2012      	movs	r0, #18
1a0006de:	f000 febd 	bl	1a00145c <gpioWrite>
        delay(5);        
1a0006e2:	2005      	movs	r0, #5
1a0006e4:	2100      	movs	r1, #0
1a0006e6:	f000 fdc9 	bl	1a00127c <delay>
       if( leerTecladoMatricial() ){
1a0006ea:	f7ff ff2f 	bl	1a00054c <leerTecladoMatricial>
1a0006ee:	2800      	cmp	r0, #0
1a0006f0:	d098      	beq.n	1a000624 <main+0x3c>
         n = keypadKeys[key];
1a0006f2:	4b04      	ldr	r3, [pc, #16]	; (1a000704 <main+0x11c>)
1a0006f4:	881a      	ldrh	r2, [r3, #0]
         k = i;
1a0006f6:	462f      	mov	r7, r5
         i = m;
1a0006f8:	4635      	mov	r5, r6
         m = n;
1a0006fa:	4626      	mov	r6, r4
         n = keypadKeys[key];
1a0006fc:	4b02      	ldr	r3, [pc, #8]	; (1a000708 <main+0x120>)
1a0006fe:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000702:	e78f      	b.n	1a000624 <main+0x3c>
1a000704:	10000092 	.word	0x10000092
1a000708:	10000028 	.word	0x10000028

1a00070c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00070c:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00070e:	2069      	movs	r0, #105	; 0x69
1a000710:	f000 fa86 	bl	1a000c20 <Chip_Clock_GetRate>
1a000714:	4b01      	ldr	r3, [pc, #4]	; (1a00071c <SystemCoreClockUpdate+0x10>)
1a000716:	6018      	str	r0, [r3, #0]
1a000718:	bd08      	pop	{r3, pc}
1a00071a:	bf00      	nop
1a00071c:	100000a4 	.word	0x100000a4

1a000720 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000720:	b5f0      	push	{r4, r5, r6, r7, lr}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a000722:	680b      	ldr	r3, [r1, #0]
1a000724:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000728:	d002      	beq.n	1a000730 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a00072a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00072e:	600b      	str	r3, [r1, #0]
1a000730:	4607      	mov	r7, r0
1a000732:	2501      	movs	r5, #1
1a000734:	e03b      	b.n	1a0007ae <pll_calc_divs+0x8e>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a000736:	694b      	ldr	r3, [r1, #20]
1a000738:	fb03 f302 	mul.w	r3, r3, r2
1a00073c:	fbb3 f3f5 	udiv	r3, r3, r5
1a000740:	e014      	b.n	1a00076c <pll_calc_divs+0x4c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a000742:	461c      	mov	r4, r3
1a000744:	e020      	b.n	1a000788 <pll_calc_divs+0x68>
       return -val;
1a000746:	f1ce 0e00 	rsb	lr, lr, #0
1a00074a:	e020      	b.n	1a00078e <pll_calc_divs+0x6e>
           for (m = 1; m <= 256; m++) {
1a00074c:	3201      	adds	r2, #1
1a00074e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000752:	dc26      	bgt.n	1a0007a2 <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a000754:	680c      	ldr	r4, [r1, #0]
1a000756:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00075a:	d0ec      	beq.n	1a000736 <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00075c:	1c73      	adds	r3, r6, #1
1a00075e:	fa02 fe03 	lsl.w	lr, r2, r3
1a000762:	694b      	ldr	r3, [r1, #20]
1a000764:	fb03 f30e 	mul.w	r3, r3, lr
1a000768:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00076c:	f8df e048 	ldr.w	lr, [pc, #72]	; 1a0007b8 <pll_calc_divs+0x98>
1a000770:	4573      	cmp	r3, lr
1a000772:	d9eb      	bls.n	1a00074c <pll_calc_divs+0x2c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000774:	f8df e044 	ldr.w	lr, [pc, #68]	; 1a0007bc <pll_calc_divs+0x9c>
1a000778:	4573      	cmp	r3, lr
1a00077a:	d812      	bhi.n	1a0007a2 <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a00077c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000780:	d1df      	bne.n	1a000742 <pll_calc_divs+0x22>
               } else {
                   fout = fcco >> (p + 1);
1a000782:	1c74      	adds	r4, r6, #1
1a000784:	fa23 f404 	lsr.w	r4, r3, r4
   if (val < 0)
1a000788:	ebb0 0e04 	subs.w	lr, r0, r4
1a00078c:	d4db      	bmi.n	1a000746 <pll_calc_divs+0x26>
               }

               if (ABS(freq - fout) < prev) {
1a00078e:	4577      	cmp	r7, lr
1a000790:	d9dc      	bls.n	1a00074c <pll_calc_divs+0x2c>
                   ppll->nsel = n;
1a000792:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000794:	1c77      	adds	r7, r6, #1
1a000796:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a000798:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a00079a:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a00079c:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a00079e:	4677      	mov	r7, lr
1a0007a0:	e7d4      	b.n	1a00074c <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a0007a2:	3601      	adds	r6, #1
1a0007a4:	2e03      	cmp	r6, #3
1a0007a6:	dc01      	bgt.n	1a0007ac <pll_calc_divs+0x8c>
1a0007a8:	2201      	movs	r2, #1
1a0007aa:	e7d0      	b.n	1a00074e <pll_calc_divs+0x2e>
   for (n = 1; n <= 4; n++) {
1a0007ac:	3501      	adds	r5, #1
1a0007ae:	2d04      	cmp	r5, #4
1a0007b0:	dc01      	bgt.n	1a0007b6 <pll_calc_divs+0x96>
1a0007b2:	2600      	movs	r6, #0
1a0007b4:	e7f6      	b.n	1a0007a4 <pll_calc_divs+0x84>
               }
           }
       }
   }
}
1a0007b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0007b8:	094c5eff 	.word	0x094c5eff
1a0007bc:	1312d000 	.word	0x1312d000

1a0007c0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007c2:	b099      	sub	sp, #100	; 0x64
1a0007c4:	4605      	mov	r5, r0
1a0007c6:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0007c8:	2260      	movs	r2, #96	; 0x60
1a0007ca:	2100      	movs	r1, #0
1a0007cc:	4668      	mov	r0, sp
1a0007ce:	f001 f8ff 	bl	1a0019d0 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a0007d2:	2380      	movs	r3, #128	; 0x80
1a0007d4:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a0007d6:	6963      	ldr	r3, [r4, #20]
1a0007d8:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a0007da:	7923      	ldrb	r3, [r4, #4]
1a0007dc:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a0007e0:	4669      	mov	r1, sp
1a0007e2:	4628      	mov	r0, r5
1a0007e4:	f7ff ff9c 	bl	1a000720 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a0007e8:	9b06      	ldr	r3, [sp, #24]
1a0007ea:	429d      	cmp	r5, r3
1a0007ec:	d02f      	beq.n	1a00084e <pll_get_frac+0x8e>
   if (val < 0)
1a0007ee:	1aeb      	subs	r3, r5, r3
1a0007f0:	d436      	bmi.n	1a000860 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a0007f2:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a0007f4:	2340      	movs	r3, #64	; 0x40
1a0007f6:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a0007f8:	6963      	ldr	r3, [r4, #20]
1a0007fa:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a0007fc:	7923      	ldrb	r3, [r4, #4]
1a0007fe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a000802:	a910      	add	r1, sp, #64	; 0x40
1a000804:	4628      	mov	r0, r5
1a000806:	f7ff ff8b 	bl	1a000720 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a00080a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00080c:	429d      	cmp	r5, r3
1a00080e:	d029      	beq.n	1a000864 <pll_get_frac+0xa4>
   if (val < 0)
1a000810:	1aeb      	subs	r3, r5, r3
1a000812:	d42f      	bmi.n	1a000874 <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a000814:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a000816:	2340      	movs	r3, #64	; 0x40
1a000818:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a00081a:	6963      	ldr	r3, [r4, #20]
1a00081c:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a00081e:	7923      	ldrb	r3, [r4, #4]
1a000820:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a000824:	a908      	add	r1, sp, #32
1a000826:	4628      	mov	r0, r5
1a000828:	f7ff ff7a 	bl	1a000720 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a00082c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00082e:	429d      	cmp	r5, r3
1a000830:	d022      	beq.n	1a000878 <pll_get_frac+0xb8>
   if (val < 0)
1a000832:	1aed      	subs	r5, r5, r3
1a000834:	d428      	bmi.n	1a000888 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a000836:	42ae      	cmp	r6, r5
1a000838:	dc30      	bgt.n	1a00089c <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a00083a:	42be      	cmp	r6, r7
1a00083c:	dc26      	bgt.n	1a00088c <pll_get_frac+0xcc>
           *ppll = pll[0];
1a00083e:	466d      	mov	r5, sp
1a000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000844:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000848:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00084c:	e006      	b.n	1a00085c <pll_get_frac+0x9c>
       *ppll = pll[0];
1a00084e:	466d      	mov	r5, sp
1a000850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000854:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a00085c:	b019      	add	sp, #100	; 0x64
1a00085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a000860:	425b      	negs	r3, r3
1a000862:	e7c6      	b.n	1a0007f2 <pll_get_frac+0x32>
       *ppll = pll[2];
1a000864:	ad10      	add	r5, sp, #64	; 0x40
1a000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00086a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00086e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000872:	e7f3      	b.n	1a00085c <pll_get_frac+0x9c>
       return -val;
1a000874:	425b      	negs	r3, r3
1a000876:	e7cd      	b.n	1a000814 <pll_get_frac+0x54>
       *ppll = pll[1];
1a000878:	ad08      	add	r5, sp, #32
1a00087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00087e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000886:	e7e9      	b.n	1a00085c <pll_get_frac+0x9c>
       return -val;
1a000888:	426d      	negs	r5, r5
1a00088a:	e7d4      	b.n	1a000836 <pll_get_frac+0x76>
           *ppll = pll[2];
1a00088c:	ad10      	add	r5, sp, #64	; 0x40
1a00088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000892:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00089a:	e7df      	b.n	1a00085c <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a00089c:	42af      	cmp	r7, r5
1a00089e:	db07      	blt.n	1a0008b0 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a0008a0:	ad08      	add	r5, sp, #32
1a0008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008ae:	e7d5      	b.n	1a00085c <pll_get_frac+0x9c>
           *ppll = pll[2];
1a0008b0:	ad10      	add	r5, sp, #64	; 0x40
1a0008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0008b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008be:	e7cd      	b.n	1a00085c <pll_get_frac+0x9c>

1a0008c0 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0008c0:	b430      	push	{r4, r5}
1a0008c2:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a0008c4:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0008c6:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008c8:	e000      	b.n	1a0008cc <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a0008ca:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008cc:	281c      	cmp	r0, #28
1a0008ce:	d118      	bne.n	1a000902 <Chip_Clock_FindBaseClock+0x42>
1a0008d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0008d4:	0051      	lsls	r1, r2, #1
1a0008d6:	4a0c      	ldr	r2, [pc, #48]	; (1a000908 <Chip_Clock_FindBaseClock+0x48>)
1a0008d8:	440a      	add	r2, r1
1a0008da:	7914      	ldrb	r4, [r2, #4]
1a0008dc:	42a0      	cmp	r0, r4
1a0008de:	d010      	beq.n	1a000902 <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0008e0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0008e4:	004a      	lsls	r2, r1, #1
1a0008e6:	4908      	ldr	r1, [pc, #32]	; (1a000908 <Chip_Clock_FindBaseClock+0x48>)
1a0008e8:	5a8a      	ldrh	r2, [r1, r2]
1a0008ea:	42aa      	cmp	r2, r5
1a0008ec:	d8ed      	bhi.n	1a0008ca <Chip_Clock_FindBaseClock+0xa>
1a0008ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0008f2:	0051      	lsls	r1, r2, #1
1a0008f4:	4a04      	ldr	r2, [pc, #16]	; (1a000908 <Chip_Clock_FindBaseClock+0x48>)
1a0008f6:	440a      	add	r2, r1
1a0008f8:	8852      	ldrh	r2, [r2, #2]
1a0008fa:	4295      	cmp	r5, r2
1a0008fc:	d8e5      	bhi.n	1a0008ca <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a0008fe:	4620      	mov	r0, r4
1a000900:	e7e4      	b.n	1a0008cc <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a000902:	bc30      	pop	{r4, r5}
1a000904:	4770      	bx	lr
1a000906:	bf00      	nop
1a000908:	1a0019ec 	.word	0x1a0019ec

1a00090c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00090c:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a00090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000912:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000914:	4a0d      	ldr	r2, [pc, #52]	; (1a00094c <Chip_Clock_EnableCrystal+0x40>)
1a000916:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000918:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00091c:	6992      	ldr	r2, [r2, #24]
1a00091e:	4291      	cmp	r1, r2
1a000920:	d001      	beq.n	1a000926 <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000922:	4a0a      	ldr	r2, [pc, #40]	; (1a00094c <Chip_Clock_EnableCrystal+0x40>)
1a000924:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000926:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a00092a:	4a09      	ldr	r2, [pc, #36]	; (1a000950 <Chip_Clock_EnableCrystal+0x44>)
1a00092c:	6811      	ldr	r1, [r2, #0]
1a00092e:	4a09      	ldr	r2, [pc, #36]	; (1a000954 <Chip_Clock_EnableCrystal+0x48>)
1a000930:	4291      	cmp	r1, r2
1a000932:	d901      	bls.n	1a000938 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000934:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000938:	4a04      	ldr	r2, [pc, #16]	; (1a00094c <Chip_Clock_EnableCrystal+0x40>)
1a00093a:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a00093c:	9b01      	ldr	r3, [sp, #4]
1a00093e:	1e5a      	subs	r2, r3, #1
1a000940:	9201      	str	r2, [sp, #4]
1a000942:	2b00      	cmp	r3, #0
1a000944:	d1fa      	bne.n	1a00093c <Chip_Clock_EnableCrystal+0x30>
}
1a000946:	b002      	add	sp, #8
1a000948:	4770      	bx	lr
1a00094a:	bf00      	nop
1a00094c:	40050000 	.word	0x40050000
1a000950:	1a001ab4 	.word	0x1a001ab4
1a000954:	01312cff 	.word	0x01312cff

1a000958 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000958:	3012      	adds	r0, #18
1a00095a:	4b05      	ldr	r3, [pc, #20]	; (1a000970 <Chip_Clock_GetDividerSource+0x18>)
1a00095c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a000960:	f010 0f01 	tst.w	r0, #1
1a000964:	d001      	beq.n	1a00096a <Chip_Clock_GetDividerSource+0x12>
       return CLKINPUT_PD;
1a000966:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000968:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00096a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00096e:	4770      	bx	lr
1a000970:	40050000 	.word	0x40050000

1a000974 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000974:	f100 0212 	add.w	r2, r0, #18
1a000978:	4b03      	ldr	r3, [pc, #12]	; (1a000988 <Chip_Clock_GetDividerDivisor+0x14>)
1a00097a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00097e:	4b03      	ldr	r3, [pc, #12]	; (1a00098c <Chip_Clock_GetDividerDivisor+0x18>)
1a000980:	5c18      	ldrb	r0, [r3, r0]
}
1a000982:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000986:	4770      	bx	lr
1a000988:	40050000 	.word	0x40050000
1a00098c:	1a0019e4 	.word	0x1a0019e4

1a000990 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000990:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a000992:	2810      	cmp	r0, #16
1a000994:	d80a      	bhi.n	1a0009ac <Chip_Clock_GetClockInputHz+0x1c>
1a000996:	e8df f000 	tbb	[pc, r0]
1a00099a:	0b44      	.short	0x0b44
1a00099c:	0921180d 	.word	0x0921180d
1a0009a0:	2d2a2724 	.word	0x2d2a2724
1a0009a4:	34300909 	.word	0x34300909
1a0009a8:	3c38      	.short	0x3c38
1a0009aa:	40          	.byte	0x40
1a0009ab:	00          	.byte	0x00
   uint32_t rate = 0;
1a0009ac:	2000      	movs	r0, #0
1a0009ae:	bd08      	pop	{r3, pc}
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a0009b0:	481e      	ldr	r0, [pc, #120]	; (1a000a2c <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a0009b2:	bd08      	pop	{r3, pc}

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009b4:	4b1e      	ldr	r3, [pc, #120]	; (1a000a30 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009b6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0009ba:	f003 0307 	and.w	r3, r3, #7
1a0009be:	2b04      	cmp	r3, #4
1a0009c0:	d001      	beq.n	1a0009c6 <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a0009c2:	481c      	ldr	r0, [pc, #112]	; (1a000a34 <Chip_Clock_GetClockInputHz+0xa4>)
1a0009c4:	bd08      	pop	{r3, pc}
   uint32_t rate = 0;
1a0009c6:	2000      	movs	r0, #0
1a0009c8:	bd08      	pop	{r3, pc}
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009ca:	4b19      	ldr	r3, [pc, #100]	; (1a000a30 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009cc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0009d0:	f003 0307 	and.w	r3, r3, #7
1a0009d4:	2b04      	cmp	r3, #4
1a0009d6:	d027      	beq.n	1a000a28 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a0009d8:	4816      	ldr	r0, [pc, #88]	; (1a000a34 <Chip_Clock_GetClockInputHz+0xa4>)
1a0009da:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a0009dc:	4b16      	ldr	r3, [pc, #88]	; (1a000a38 <Chip_Clock_GetClockInputHz+0xa8>)
1a0009de:	6818      	ldr	r0, [r3, #0]
       break;
1a0009e0:	bd08      	pop	{r3, pc}

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a0009e2:	4b16      	ldr	r3, [pc, #88]	; (1a000a3c <Chip_Clock_GetClockInputHz+0xac>)
1a0009e4:	6818      	ldr	r0, [r3, #0]
       break;
1a0009e6:	bd08      	pop	{r3, pc}

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0009e8:	4b15      	ldr	r3, [pc, #84]	; (1a000a40 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009ea:	6818      	ldr	r0, [r3, #0]
       break;
1a0009ec:	bd08      	pop	{r3, pc}

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0009ee:	4b14      	ldr	r3, [pc, #80]	; (1a000a40 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009f0:	6858      	ldr	r0, [r3, #4]
       break;
1a0009f2:	bd08      	pop	{r3, pc}

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a0009f4:	f000 f868 	bl	1a000ac8 <Chip_Clock_GetMainPLLHz>
       break;
1a0009f8:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0009fa:	2100      	movs	r1, #0
1a0009fc:	f000 f89a 	bl	1a000b34 <Chip_Clock_GetDivRate>
       break;
1a000a00:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000a02:	2101      	movs	r1, #1
1a000a04:	f000 f896 	bl	1a000b34 <Chip_Clock_GetDivRate>
       break;
1a000a08:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000a0a:	2102      	movs	r1, #2
1a000a0c:	f000 f892 	bl	1a000b34 <Chip_Clock_GetDivRate>
       break;
1a000a10:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000a12:	2103      	movs	r1, #3
1a000a14:	f000 f88e 	bl	1a000b34 <Chip_Clock_GetDivRate>
       break;
1a000a18:	bd08      	pop	{r3, pc}

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000a1a:	2104      	movs	r1, #4
1a000a1c:	f000 f88a 	bl	1a000b34 <Chip_Clock_GetDivRate>
       break;
1a000a20:	bd08      	pop	{r3, pc}
       rate = CRYSTAL_32K_FREQ_IN;
1a000a22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000a26:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000a28:	4806      	ldr	r0, [pc, #24]	; (1a000a44 <Chip_Clock_GetClockInputHz+0xb4>)
   default:
       break;
   }

   return rate;
}
1a000a2a:	bd08      	pop	{r3, pc}
1a000a2c:	00b71b00 	.word	0x00b71b00
1a000a30:	40043000 	.word	0x40043000
1a000a34:	017d7840 	.word	0x017d7840
1a000a38:	1a001ab0 	.word	0x1a001ab0
1a000a3c:	1a001ab4 	.word	0x1a001ab4
1a000a40:	10000098 	.word	0x10000098
1a000a44:	02faf080 	.word	0x02faf080

1a000a48 <Chip_Clock_CalcMainPLLValue>:
{
1a000a48:	b538      	push	{r3, r4, r5, lr}
1a000a4a:	4605      	mov	r5, r0
1a000a4c:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000a4e:	7908      	ldrb	r0, [r1, #4]
1a000a50:	f7ff ff9e 	bl	1a000990 <Chip_Clock_GetClockInputHz>
1a000a54:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000a56:	4b19      	ldr	r3, [pc, #100]	; (1a000abc <Chip_Clock_CalcMainPLLValue+0x74>)
1a000a58:	442b      	add	r3, r5
1a000a5a:	4a19      	ldr	r2, [pc, #100]	; (1a000ac0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000a5c:	4293      	cmp	r3, r2
1a000a5e:	d821      	bhi.n	1a000aa4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000a60:	b318      	cbz	r0, 1a000aaa <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000a62:	2380      	movs	r3, #128	; 0x80
1a000a64:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a000a66:	2300      	movs	r3, #0
1a000a68:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a000a6a:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000a6c:	fbb5 f3f0 	udiv	r3, r5, r0
1a000a70:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000a72:	4a14      	ldr	r2, [pc, #80]	; (1a000ac4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000a74:	4295      	cmp	r5, r2
1a000a76:	d903      	bls.n	1a000a80 <Chip_Clock_CalcMainPLLValue+0x38>
1a000a78:	fb03 f000 	mul.w	r0, r3, r0
1a000a7c:	4285      	cmp	r5, r0
1a000a7e:	d007      	beq.n	1a000a90 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000a80:	4621      	mov	r1, r4
1a000a82:	4628      	mov	r0, r5
1a000a84:	f7ff fe9c 	bl	1a0007c0 <pll_get_frac>
       if (!ppll->nsel) {
1a000a88:	68a3      	ldr	r3, [r4, #8]
1a000a8a:	b18b      	cbz	r3, 1a000ab0 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000a8c:	3b01      	subs	r3, #1
1a000a8e:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000a90:	6923      	ldr	r3, [r4, #16]
1a000a92:	b183      	cbz	r3, 1a000ab6 <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000a94:	68e2      	ldr	r2, [r4, #12]
1a000a96:	b10a      	cbz	r2, 1a000a9c <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000a98:	3a01      	subs	r2, #1
1a000a9a:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000a9c:	3b01      	subs	r3, #1
1a000a9e:	6123      	str	r3, [r4, #16]
   return 0;
1a000aa0:	2000      	movs	r0, #0
1a000aa2:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000aa4:	f04f 30ff 	mov.w	r0, #4294967295
1a000aa8:	bd38      	pop	{r3, r4, r5, pc}
1a000aaa:	f04f 30ff 	mov.w	r0, #4294967295
1a000aae:	bd38      	pop	{r3, r4, r5, pc}
           return -1;
1a000ab0:	f04f 30ff 	mov.w	r0, #4294967295
1a000ab4:	bd38      	pop	{r3, r4, r5, pc}
       return - 1;
1a000ab6:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000aba:	bd38      	pop	{r3, r4, r5, pc}
1a000abc:	ff6b3a10 	.word	0xff6b3a10
1a000ac0:	0b940510 	.word	0x0b940510
1a000ac4:	094c5eff 	.word	0x094c5eff

1a000ac8 <Chip_Clock_GetMainPLLHz>:
{
1a000ac8:	b530      	push	{r4, r5, lr}
1a000aca:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000acc:	4d17      	ldr	r5, [pc, #92]	; (1a000b2c <Chip_Clock_GetMainPLLHz+0x64>)
1a000ace:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ad0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000ad4:	f7ff ff5c 	bl	1a000990 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000ad8:	4b15      	ldr	r3, [pc, #84]	; (1a000b30 <Chip_Clock_GetMainPLLHz+0x68>)
1a000ada:	681b      	ldr	r3, [r3, #0]
1a000adc:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ade:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000ae0:	f013 0f01 	tst.w	r3, #1
1a000ae4:	d01f      	beq.n	1a000b26 <Chip_Clock_GetMainPLLHz+0x5e>
   msel = (PLLReg >> 16) & 0xFF;
1a000ae6:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000aea:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000aee:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000af2:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000af6:	3201      	adds	r2, #1
   n = nsel + 1;
1a000af8:	3301      	adds	r3, #1
   p = ptab[psel];
1a000afa:	f10d 0e08 	add.w	lr, sp, #8
1a000afe:	4471      	add	r1, lr
1a000b00:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000b04:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000b08:	d108      	bne.n	1a000b1c <Chip_Clock_GetMainPLLHz+0x54>
1a000b0a:	b93d      	cbnz	r5, 1a000b1c <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000b0c:	0049      	lsls	r1, r1, #1
1a000b0e:	fbb2 f2f1 	udiv	r2, r2, r1
1a000b12:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b16:	fb00 f002 	mul.w	r0, r0, r2
1a000b1a:	e005      	b.n	1a000b28 <Chip_Clock_GetMainPLLHz+0x60>
       return m * (freq / n);
1a000b1c:	fbb0 f0f3 	udiv	r0, r0, r3
1a000b20:	fb00 f002 	mul.w	r0, r0, r2
1a000b24:	e000      	b.n	1a000b28 <Chip_Clock_GetMainPLLHz+0x60>
       return 0;
1a000b26:	2000      	movs	r0, #0
}
1a000b28:	b003      	add	sp, #12
1a000b2a:	bd30      	pop	{r4, r5, pc}
1a000b2c:	40050000 	.word	0x40050000
1a000b30:	1a0019e0 	.word	0x1a0019e0

1a000b34 <Chip_Clock_GetDivRate>:
{
1a000b34:	b538      	push	{r3, r4, r5, lr}
1a000b36:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000b38:	4608      	mov	r0, r1
1a000b3a:	f7ff ff0d 	bl	1a000958 <Chip_Clock_GetDividerSource>
1a000b3e:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000b40:	4620      	mov	r0, r4
1a000b42:	f7ff ff17 	bl	1a000974 <Chip_Clock_GetDividerDivisor>
1a000b46:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000b48:	4628      	mov	r0, r5
1a000b4a:	f7ff ff21 	bl	1a000990 <Chip_Clock_GetClockInputHz>
1a000b4e:	3401      	adds	r4, #1
}
1a000b50:	fbb0 f0f4 	udiv	r0, r0, r4
1a000b54:	bd38      	pop	{r3, r4, r5, pc}
1a000b56:	Address 0x1a000b56 is out of bounds.


1a000b58 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000b58:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b5a:	f100 0416 	add.w	r4, r0, #22
1a000b5e:	00a4      	lsls	r4, r4, #2
1a000b60:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000b64:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000b68:	6865      	ldr	r5, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000b6a:	281b      	cmp	r0, #27
1a000b6c:	d813      	bhi.n	1a000b96 <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000b6e:	2911      	cmp	r1, #17
1a000b70:	d01a      	beq.n	1a000ba8 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000b72:	4c0e      	ldr	r4, [pc, #56]	; (1a000bac <Chip_Clock_SetBaseClock+0x54>)
1a000b74:	402c      	ands	r4, r5

           if (autoblocken) {
1a000b76:	b10a      	cbz	r2, 1a000b7c <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000b78:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
           }
           if (powerdn) {
1a000b7c:	b10b      	cbz	r3, 1a000b82 <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000b7e:	f044 0401 	orr.w	r4, r4, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000b82:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000b86:	3016      	adds	r0, #22
1a000b88:	0080      	lsls	r0, r0, #2
1a000b8a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000b8e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000b92:	6044      	str	r4, [r0, #4]
1a000b94:	e008      	b.n	1a000ba8 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000b96:	f045 0501 	orr.w	r5, r5, #1
1a000b9a:	3016      	adds	r0, #22
1a000b9c:	0080      	lsls	r0, r0, #2
1a000b9e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ba2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ba6:	6045      	str	r5, [r0, #4]
   }
}
1a000ba8:	bc30      	pop	{r4, r5}
1a000baa:	4770      	bx	lr
1a000bac:	e0fff7fe 	.word	0xe0fff7fe

1a000bb0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000bb0:	281b      	cmp	r0, #27
1a000bb2:	d901      	bls.n	1a000bb8 <Chip_Clock_GetBaseClock+0x8>
       return CLKINPUT_PD;
1a000bb4:	2011      	movs	r0, #17
1a000bb6:	4770      	bx	lr
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000bb8:	3016      	adds	r0, #22
1a000bba:	0080      	lsls	r0, r0, #2
1a000bbc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000bc0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000bc4:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000bc6:	f010 0f01 	tst.w	r0, #1
1a000bca:	d001      	beq.n	1a000bd0 <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
1a000bcc:	2011      	movs	r0, #17
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a000bce:	4770      	bx	lr
   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000bd0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000bd4:	4770      	bx	lr

1a000bd6 <Chip_Clock_GetBaseClocktHz>:
{
1a000bd6:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000bd8:	f7ff ffea 	bl	1a000bb0 <Chip_Clock_GetBaseClock>
1a000bdc:	f7ff fed8 	bl	1a000990 <Chip_Clock_GetClockInputHz>
}
1a000be0:	bd08      	pop	{r3, pc}
1a000be2:	Address 0x1a000be2 is out of bounds.


1a000be4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000be4:	b969      	cbnz	r1, 1a000c02 <Chip_Clock_EnableOpts+0x1e>
   uint32_t reg = 1;
1a000be6:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000be8:	b10a      	cbz	r2, 1a000bee <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000bea:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000bee:	2b02      	cmp	r3, #2
1a000bf0:	d009      	beq.n	1a000c06 <Chip_Clock_EnableOpts+0x22>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000bf2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000bf6:	d209      	bcs.n	1a000c0c <Chip_Clock_EnableOpts+0x28>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000bf8:	3020      	adds	r0, #32
1a000bfa:	4b07      	ldr	r3, [pc, #28]	; (1a000c18 <Chip_Clock_EnableOpts+0x34>)
1a000bfc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000c00:	4770      	bx	lr
       reg |= (1 << 1);
1a000c02:	2103      	movs	r1, #3
1a000c04:	e7f0      	b.n	1a000be8 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000c06:	f041 0120 	orr.w	r1, r1, #32
1a000c0a:	e7f2      	b.n	1a000bf2 <Chip_Clock_EnableOpts+0xe>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000c0c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000c10:	4b02      	ldr	r3, [pc, #8]	; (1a000c1c <Chip_Clock_EnableOpts+0x38>)
1a000c12:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000c16:	4770      	bx	lr
1a000c18:	40051000 	.word	0x40051000
1a000c1c:	40052000 	.word	0x40052000

1a000c20 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000c20:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000c22:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000c26:	d309      	bcc.n	1a000c3c <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000c28:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000c2c:	4a0d      	ldr	r2, [pc, #52]	; (1a000c64 <Chip_Clock_GetRate+0x44>)
1a000c2e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000c32:	f014 0f01 	tst.w	r4, #1
1a000c36:	d107      	bne.n	1a000c48 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000c38:	2000      	movs	r0, #0
   }

   return rate;
}
1a000c3a:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000c3c:	f100 0320 	add.w	r3, r0, #32
1a000c40:	4a09      	ldr	r2, [pc, #36]	; (1a000c68 <Chip_Clock_GetRate+0x48>)
1a000c42:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000c46:	e7f4      	b.n	1a000c32 <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000c48:	f7ff fe3a 	bl	1a0008c0 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000c4c:	f7ff ffc3 	bl	1a000bd6 <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000c50:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000c54:	d103      	bne.n	1a000c5e <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000c56:	2301      	movs	r3, #1
       rate = rate / div;
1a000c58:	fbb0 f0f3 	udiv	r0, r0, r3
1a000c5c:	bd10      	pop	{r4, pc}
           div = 2;/* No other dividers supported */
1a000c5e:	2302      	movs	r3, #2
1a000c60:	e7fa      	b.n	1a000c58 <Chip_Clock_GetRate+0x38>
1a000c62:	bf00      	nop
1a000c64:	40052000 	.word	0x40052000
1a000c68:	40051000 	.word	0x40051000

1a000c6c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000c6c:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000c6e:	4b0f      	ldr	r3, [pc, #60]	; (1a000cac <fpuInit+0x40>)
1a000c70:	681b      	ldr	r3, [r3, #0]
1a000c72:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000c74:	4b0e      	ldr	r3, [pc, #56]	; (1a000cb0 <fpuInit+0x44>)
1a000c76:	681b      	ldr	r3, [r3, #0]
1a000c78:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000c7a:	9a02      	ldr	r2, [sp, #8]
1a000c7c:	4b0d      	ldr	r3, [pc, #52]	; (1a000cb4 <fpuInit+0x48>)
1a000c7e:	429a      	cmp	r2, r3
1a000c80:	d00c      	beq.n	1a000c9c <fpuInit+0x30>
1a000c82:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000c84:	b143      	cbz	r3, 1a000c98 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000c86:	4a0c      	ldr	r2, [pc, #48]	; (1a000cb8 <fpuInit+0x4c>)
1a000c88:	6813      	ldr	r3, [r2, #0]
1a000c8a:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000c8c:	9b03      	ldr	r3, [sp, #12]
1a000c8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000c92:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000c94:	9b03      	ldr	r3, [sp, #12]
1a000c96:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000c98:	b004      	add	sp, #16
1a000c9a:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000c9c:	9a01      	ldr	r2, [sp, #4]
1a000c9e:	4b07      	ldr	r3, [pc, #28]	; (1a000cbc <fpuInit+0x50>)
1a000ca0:	429a      	cmp	r2, r3
1a000ca2:	d001      	beq.n	1a000ca8 <fpuInit+0x3c>
1a000ca4:	2300      	movs	r3, #0
1a000ca6:	e7ed      	b.n	1a000c84 <fpuInit+0x18>
1a000ca8:	2301      	movs	r3, #1
1a000caa:	e7eb      	b.n	1a000c84 <fpuInit+0x18>
1a000cac:	e000ef40 	.word	0xe000ef40
1a000cb0:	e000ef44 	.word	0xe000ef44
1a000cb4:	10110021 	.word	0x10110021
1a000cb8:	e000ed88 	.word	0xe000ed88
1a000cbc:	11000011 	.word	0x11000011

1a000cc0 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a000cc0:	4770      	bx	lr

1a000cc2 <Chip_GPIO_SetDir>:
}

/* Set Direction for a GPIO port */
void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
   if (out) {
1a000cc2:	b943      	cbnz	r3, 1a000cd6 <Chip_GPIO_SetDir+0x14>
       pGPIO->DIR[portNum] |= bitValue;
   }
   else {
       pGPIO->DIR[portNum] &= ~bitValue;
1a000cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000cc8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000ccc:	ea23 0202 	bic.w	r2, r3, r2
1a000cd0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000cd4:	4770      	bx	lr
       pGPIO->DIR[portNum] |= bitValue;
1a000cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
1a000cda:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
1a000cde:	431a      	orrs	r2, r3
1a000ce0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
1a000ce4:	4770      	bx	lr
1a000ce6:	Address 0x1a000ce6 is out of bounds.


1a000ce8 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000ce8:	b570      	push	{r4, r5, r6, lr}
1a000cea:	b092      	sub	sp, #72	; 0x48
1a000cec:	4605      	mov	r5, r0
1a000cee:	460e      	mov	r6, r1
1a000cf0:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000cf2:	f241 537c 	movw	r3, #5500	; 0x157c
1a000cf6:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000cf8:	2806      	cmp	r0, #6
1a000cfa:	d044      	beq.n	1a000d86 <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000cfc:	2300      	movs	r3, #0
1a000cfe:	2201      	movs	r2, #1
1a000d00:	4629      	mov	r1, r5
1a000d02:	2004      	movs	r0, #4
1a000d04:	f7ff ff28 	bl	1a000b58 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000d08:	4a4a      	ldr	r2, [pc, #296]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000d0a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000d0c:	f043 0301 	orr.w	r3, r3, #1
1a000d10:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000d12:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000d16:	a909      	add	r1, sp, #36	; 0x24
1a000d18:	4630      	mov	r0, r6
1a000d1a:	f7ff fe95 	bl	1a000a48 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000d1e:	4b46      	ldr	r3, [pc, #280]	; (1a000e38 <Chip_SetupCoreClock+0x150>)
1a000d20:	429e      	cmp	r6, r3
1a000d22:	d938      	bls.n	1a000d96 <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d26:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000d2a:	d001      	beq.n	1a000d30 <Chip_SetupCoreClock+0x48>
1a000d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000d2e:	b36a      	cbz	r2, 1a000d8c <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000d30:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000d34:	a901      	add	r1, sp, #4
1a000d36:	4840      	ldr	r0, [pc, #256]	; (1a000e38 <Chip_SetupCoreClock+0x150>)
1a000d38:	f7ff fe86 	bl	1a000a48 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000d3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d40:	9b01      	ldr	r3, [sp, #4]
1a000d42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d46:	9a05      	ldr	r2, [sp, #20]
1a000d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d4c:	9a03      	ldr	r2, [sp, #12]
1a000d4e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d52:	9a04      	ldr	r2, [sp, #16]
1a000d54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d58:	4a36      	ldr	r2, [pc, #216]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000d5a:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000d5c:	4b35      	ldr	r3, [pc, #212]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000d60:	f013 0f01 	tst.w	r3, #1
1a000d64:	d0fa      	beq.n	1a000d5c <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000d66:	2300      	movs	r3, #0
1a000d68:	2201      	movs	r2, #1
1a000d6a:	2109      	movs	r1, #9
1a000d6c:	2004      	movs	r0, #4
1a000d6e:	f7ff fef3 	bl	1a000b58 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000d74:	1e5a      	subs	r2, r3, #1
1a000d76:	9211      	str	r2, [sp, #68]	; 0x44
1a000d78:	2b00      	cmp	r3, #0
1a000d7a:	d1fa      	bne.n	1a000d72 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000d7c:	f241 537c 	movw	r3, #5500	; 0x157c
1a000d80:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000d82:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000d84:	e008      	b.n	1a000d98 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000d86:	f7ff fdc1 	bl	1a00090c <Chip_Clock_EnableCrystal>
1a000d8a:	e7b7      	b.n	1a000cfc <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000d90:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000d92:	2501      	movs	r5, #1
1a000d94:	e000      	b.n	1a000d98 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000d96:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000d98:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000d9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000daa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000db0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000db4:	4a1f      	ldr	r2, [pc, #124]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000db6:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000db8:	4b1e      	ldr	r3, [pc, #120]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000dbc:	f013 0f01 	tst.w	r3, #1
1a000dc0:	d0fa      	beq.n	1a000db8 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000dc2:	2300      	movs	r3, #0
1a000dc4:	2201      	movs	r2, #1
1a000dc6:	2109      	movs	r1, #9
1a000dc8:	2004      	movs	r0, #4
1a000dca:	f7ff fec5 	bl	1a000b58 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000dce:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000dd0:	1e5a      	subs	r2, r3, #1
1a000dd2:	9211      	str	r2, [sp, #68]	; 0x44
1a000dd4:	2b00      	cmp	r3, #0
1a000dd6:	d1fa      	bne.n	1a000dce <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000dd8:	b1d5      	cbz	r5, 1a000e10 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000dda:	f241 537c 	movw	r3, #5500	; 0x157c
1a000dde:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000de6:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000de8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000dec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000df8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000dfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000dfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e02:	4a0c      	ldr	r2, [pc, #48]	; (1a000e34 <Chip_SetupCoreClock+0x14c>)
1a000e04:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000e08:	1e5a      	subs	r2, r3, #1
1a000e0a:	9211      	str	r2, [sp, #68]	; 0x44
1a000e0c:	2b00      	cmp	r3, #0
1a000e0e:	d1fa      	bne.n	1a000e06 <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000e10:	b174      	cbz	r4, 1a000e30 <Chip_SetupCoreClock+0x148>
1a000e12:	2400      	movs	r4, #0
1a000e14:	e00a      	b.n	1a000e2c <Chip_SetupCoreClock+0x144>
       /* Setup system base clocks and initial states. This won't enable and
          disable individual clocks, but sets up the base clock sources for
          each individual peripheral clock. */
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000e16:	4809      	ldr	r0, [pc, #36]	; (1a000e3c <Chip_SetupCoreClock+0x154>)
1a000e18:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000e1c:	78cb      	ldrb	r3, [r1, #3]
1a000e1e:	788a      	ldrb	r2, [r1, #2]
1a000e20:	7849      	ldrb	r1, [r1, #1]
1a000e22:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000e26:	f7ff fe97 	bl	1a000b58 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000e2a:	3401      	adds	r4, #1
1a000e2c:	2c11      	cmp	r4, #17
1a000e2e:	d9f2      	bls.n	1a000e16 <Chip_SetupCoreClock+0x12e>
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000e30:	b012      	add	sp, #72	; 0x48
1a000e32:	bd70      	pop	{r4, r5, r6, pc}
1a000e34:	40050000 	.word	0x40050000
1a000e38:	068e7780 	.word	0x068e7780
1a000e3c:	1a001a58 	.word	0x1a001a58

1a000e40 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000e40:	4b09      	ldr	r3, [pc, #36]	; (1a000e68 <Chip_UART_GetIndex+0x28>)
1a000e42:	4298      	cmp	r0, r3
1a000e44:	d009      	beq.n	1a000e5a <Chip_UART_GetIndex+0x1a>
1a000e46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000e4a:	4298      	cmp	r0, r3
1a000e4c:	d007      	beq.n	1a000e5e <Chip_UART_GetIndex+0x1e>
1a000e4e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000e52:	4298      	cmp	r0, r3
1a000e54:	d005      	beq.n	1a000e62 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000e56:	2000      	movs	r0, #0
1a000e58:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000e5a:	2002      	movs	r0, #2
1a000e5c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000e5e:	2003      	movs	r0, #3
1a000e60:	4770      	bx	lr
           return 1;
1a000e62:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000e64:	4770      	bx	lr
1a000e66:	bf00      	nop
1a000e68:	400c1000 	.word	0x400c1000

1a000e6c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e6c:	b530      	push	{r4, r5, lr}
1a000e6e:	b083      	sub	sp, #12
1a000e70:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e72:	f7ff ffe5 	bl	1a000e40 <Chip_UART_GetIndex>
1a000e76:	2301      	movs	r3, #1
1a000e78:	461a      	mov	r2, r3
1a000e7a:	4619      	mov	r1, r3
1a000e7c:	4d0e      	ldr	r5, [pc, #56]	; (1a000eb8 <Chip_UART_Init+0x4c>)
1a000e7e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000e82:	f7ff feaf 	bl	1a000be4 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000e86:	2307      	movs	r3, #7
1a000e88:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000e8a:	2300      	movs	r3, #0
1a000e8c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000e8e:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000e90:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000e92:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000e94:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000e96:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000e98:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000e9a:	4b08      	ldr	r3, [pc, #32]	; (1a000ebc <Chip_UART_Init+0x50>)
1a000e9c:	429c      	cmp	r4, r3
1a000e9e:	d005      	beq.n	1a000eac <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000ea0:	2303      	movs	r3, #3
1a000ea2:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000ea4:	2310      	movs	r3, #16
1a000ea6:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000ea8:	b003      	add	sp, #12
1a000eaa:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000eac:	2300      	movs	r3, #0
1a000eae:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000eb0:	69a3      	ldr	r3, [r4, #24]
1a000eb2:	9301      	str	r3, [sp, #4]
1a000eb4:	e7f4      	b.n	1a000ea0 <Chip_UART_Init+0x34>
1a000eb6:	bf00      	nop
1a000eb8:	1a001aa8 	.word	0x1a001aa8
1a000ebc:	40082000 	.word	0x40082000

1a000ec0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000ec4:	b083      	sub	sp, #12
1a000ec6:	4683      	mov	fp, r0
1a000ec8:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000eca:	f7ff ffb9 	bl	1a000e40 <Chip_UART_GetIndex>
1a000ece:	4b35      	ldr	r3, [pc, #212]	; (1a000fa4 <Chip_UART_SetBaudFDR+0xe4>)
1a000ed0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ed4:	f7ff fea4 	bl	1a000c20 <Chip_Clock_GetRate>
1a000ed8:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000eda:	f04f 37ff 	mov.w	r7, #4294967295

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000ede:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000ee0:	2300      	movs	r3, #0
1a000ee2:	9301      	str	r3, [sp, #4]
1a000ee4:	46a2      	mov	sl, r4
1a000ee6:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000ee8:	e02a      	b.n	1a000f40 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000eea:	4243      	negs	r3, r0
               div ++;
1a000eec:	1c4a      	adds	r2, r1, #1
1a000eee:	e017      	b.n	1a000f20 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000ef0:	b30b      	cbz	r3, 1a000f36 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a000ef2:	461f      	mov	r7, r3
           sd = d;
1a000ef4:	9501      	str	r5, [sp, #4]
           sm = m;
1a000ef6:	46a2      	mov	sl, r4
           sdiv = div;
1a000ef8:	4691      	mov	r9, r2
       for (d = 0; d < m; d++) {
1a000efa:	3501      	adds	r5, #1
1a000efc:	42ac      	cmp	r4, r5
1a000efe:	d91e      	bls.n	1a000f3e <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f00:	0933      	lsrs	r3, r6, #4
1a000f02:	0730      	lsls	r0, r6, #28
1a000f04:	fba4 0100 	umull	r0, r1, r4, r0
1a000f08:	fb04 1103 	mla	r1, r4, r3, r1
1a000f0c:	1962      	adds	r2, r4, r5
1a000f0e:	fb08 f202 	mul.w	r2, r8, r2
1a000f12:	2300      	movs	r3, #0
1a000f14:	f000 fbd4 	bl	1a0016c0 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000f18:	4603      	mov	r3, r0
           div = (uint32_t) (dval >> 32);
1a000f1a:	460a      	mov	r2, r1
           if ((int)diff < 0) {
1a000f1c:	2800      	cmp	r0, #0
1a000f1e:	dbe4      	blt.n	1a000eea <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f20:	429f      	cmp	r7, r3
1a000f22:	d3ea      	bcc.n	1a000efa <Chip_UART_SetBaudFDR+0x3a>
1a000f24:	2a00      	cmp	r2, #0
1a000f26:	d0e8      	beq.n	1a000efa <Chip_UART_SetBaudFDR+0x3a>
1a000f28:	0c11      	lsrs	r1, r2, #16
1a000f2a:	d1e6      	bne.n	1a000efa <Chip_UART_SetBaudFDR+0x3a>
1a000f2c:	2a02      	cmp	r2, #2
1a000f2e:	d8df      	bhi.n	1a000ef0 <Chip_UART_SetBaudFDR+0x30>
1a000f30:	2d00      	cmp	r5, #0
1a000f32:	d1e2      	bne.n	1a000efa <Chip_UART_SetBaudFDR+0x3a>
1a000f34:	e7dc      	b.n	1a000ef0 <Chip_UART_SetBaudFDR+0x30>
           odiff = diff;
1a000f36:	461f      	mov	r7, r3
           sd = d;
1a000f38:	9501      	str	r5, [sp, #4]
           sm = m;
1a000f3a:	46a2      	mov	sl, r4
           sdiv = div;
1a000f3c:	4691      	mov	r9, r2
   for (m = 1; odiff && m < 16; m++) {
1a000f3e:	3401      	adds	r4, #1
1a000f40:	b11f      	cbz	r7, 1a000f4a <Chip_UART_SetBaudFDR+0x8a>
1a000f42:	2c0f      	cmp	r4, #15
1a000f44:	d801      	bhi.n	1a000f4a <Chip_UART_SetBaudFDR+0x8a>
1a000f46:	2500      	movs	r5, #0
1a000f48:	e7d8      	b.n	1a000efc <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000f4a:	f1b9 0f00 	cmp.w	r9, #0
1a000f4e:	d024      	beq.n	1a000f9a <Chip_UART_SetBaudFDR+0xda>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000f50:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f58:	f8cb 300c 	str.w	r3, [fp, #12]
1a000f5c:	fa5f f389 	uxtb.w	r3, r9
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000f60:	f8cb 3000 	str.w	r3, [fp]
1a000f64:	f3c9 2307 	ubfx	r3, r9, #8, #8
   pUART->DLM = (uint32_t) dlm;
1a000f68:	f8cb 3004 	str.w	r3, [fp, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000f6c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000f74:	f8cb 300c 	str.w	r3, [fp, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000f78:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000f7c:	b2db      	uxtb	r3, r3
1a000f7e:	9901      	ldr	r1, [sp, #4]
1a000f80:	f001 020f 	and.w	r2, r1, #15
1a000f84:	4313      	orrs	r3, r2
1a000f86:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000f8a:	0933      	lsrs	r3, r6, #4
1a000f8c:	fb03 f30a 	mul.w	r3, r3, sl
1a000f90:	448a      	add	sl, r1
1a000f92:	fb0a f909 	mul.w	r9, sl, r9
1a000f96:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000f9a:	4648      	mov	r0, r9
1a000f9c:	b003      	add	sp, #12
1a000f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000fa2:	bf00      	nop
1a000fa4:	1a001aa0 	.word	0x1a001aa0

1a000fa8 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000fa8:	2200      	movs	r2, #0
1a000faa:	2a05      	cmp	r2, #5
1a000fac:	d819      	bhi.n	1a000fe2 <Board_LED_Init+0x3a>
{
1a000fae:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000fb0:	490c      	ldr	r1, [pc, #48]	; (1a000fe4 <Board_LED_Init+0x3c>)
1a000fb2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000fb6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000fba:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000fbc:	4b0a      	ldr	r3, [pc, #40]	; (1a000fe8 <Board_LED_Init+0x40>)
1a000fbe:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000fc2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000fc6:	2001      	movs	r0, #1
1a000fc8:	40a0      	lsls	r0, r4
1a000fca:	4301      	orrs	r1, r0
1a000fcc:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000fd0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000fd4:	2100      	movs	r1, #0
1a000fd6:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000fd8:	3201      	adds	r2, #1
1a000fda:	2a05      	cmp	r2, #5
1a000fdc:	d9e8      	bls.n	1a000fb0 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000fde:	bc70      	pop	{r4, r5, r6}
1a000fe0:	4770      	bx	lr
1a000fe2:	4770      	bx	lr
1a000fe4:	1a001ab8 	.word	0x1a001ab8
1a000fe8:	400f4000 	.word	0x400f4000

1a000fec <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000fec:	4b03      	ldr	r3, [pc, #12]	; (1a000ffc <Board_UART_Init+0x10>)
1a000fee:	2212      	movs	r2, #18
1a000ff0:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a000ff4:	22d1      	movs	r2, #209	; 0xd1
1a000ff6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
1a000ffa:	4770      	bx	lr
1a000ffc:	40086000 	.word	0x40086000

1a001000 <Board_Debug_Init>:
{
1a001000:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a001002:	4c08      	ldr	r4, [pc, #32]	; (1a001024 <Board_Debug_Init+0x24>)
1a001004:	4620      	mov	r0, r4
1a001006:	f7ff fff1 	bl	1a000fec <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a00100a:	4620      	mov	r0, r4
1a00100c:	f7ff ff2e 	bl	1a000e6c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001010:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001014:	4620      	mov	r0, r4
1a001016:	f7ff ff53 	bl	1a000ec0 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a00101a:	2303      	movs	r3, #3
1a00101c:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00101e:	2301      	movs	r3, #1
1a001020:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001022:	bd10      	pop	{r4, pc}
1a001024:	400c1000 	.word	0x400c1000

1a001028 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001028:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a00102a:	f7ff ffe9 	bl	1a001000 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a00102e:	4806      	ldr	r0, [pc, #24]	; (1a001048 <Board_Init+0x20>)
1a001030:	f7ff fe46 	bl	1a000cc0 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a001034:	f7ff ffb8 	bl	1a000fa8 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a001038:	4a04      	ldr	r2, [pc, #16]	; (1a00104c <Board_Init+0x24>)
1a00103a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a00103e:	f043 0304 	orr.w	r3, r3, #4
1a001042:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a001046:	bd08      	pop	{r3, pc}
1a001048:	400f4000 	.word	0x400f4000
1a00104c:	40043000 	.word	0x40043000

1a001050 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001050:	2300      	movs	r3, #0
1a001052:	2b17      	cmp	r3, #23
1a001054:	d812      	bhi.n	1a00107c <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a001056:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001058:	4a09      	ldr	r2, [pc, #36]	; (1a001080 <Board_SetupMuxing+0x30>)
1a00105a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00105e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001062:	784a      	ldrb	r2, [r1, #1]
1a001064:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001066:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00106a:	4906      	ldr	r1, [pc, #24]	; (1a001084 <Board_SetupMuxing+0x34>)
1a00106c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001070:	3301      	adds	r3, #1
1a001072:	2b17      	cmp	r3, #23
1a001074:	d9f0      	bls.n	1a001058 <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001076:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00107a:	4770      	bx	lr
1a00107c:	4770      	bx	lr
1a00107e:	bf00      	nop
1a001080:	1a001ad0 	.word	0x1a001ad0
1a001084:	40086000 	.word	0x40086000

1a001088 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001088:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00108a:	4a17      	ldr	r2, [pc, #92]	; (1a0010e8 <Board_SetupClocking+0x60>)
1a00108c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001094:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001098:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00109c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0010a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0010a4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0010a8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0010ac:	2201      	movs	r2, #1
1a0010ae:	490f      	ldr	r1, [pc, #60]	; (1a0010ec <Board_SetupClocking+0x64>)
1a0010b0:	2006      	movs	r0, #6
1a0010b2:	f7ff fe19 	bl	1a000ce8 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0010b6:	2400      	movs	r4, #0
1a0010b8:	e00a      	b.n	1a0010d0 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0010ba:	480d      	ldr	r0, [pc, #52]	; (1a0010f0 <Board_SetupClocking+0x68>)
1a0010bc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0010c0:	78cb      	ldrb	r3, [r1, #3]
1a0010c2:	788a      	ldrb	r2, [r1, #2]
1a0010c4:	7849      	ldrb	r1, [r1, #1]
1a0010c6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0010ca:	f7ff fd45 	bl	1a000b58 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0010ce:	3401      	adds	r4, #1
1a0010d0:	2c02      	cmp	r4, #2
1a0010d2:	d9f2      	bls.n	1a0010ba <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0010d4:	4b04      	ldr	r3, [pc, #16]	; (1a0010e8 <Board_SetupClocking+0x60>)
1a0010d6:	685a      	ldr	r2, [r3, #4]
1a0010d8:	f022 020c 	bic.w	r2, r2, #12
1a0010dc:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0010de:	685a      	ldr	r2, [r3, #4]
1a0010e0:	f042 0203 	orr.w	r2, r2, #3
1a0010e4:	605a      	str	r2, [r3, #4]
1a0010e6:	bd10      	pop	{r4, pc}
1a0010e8:	40043000 	.word	0x40043000
1a0010ec:	0c28cb00 	.word	0x0c28cb00
1a0010f0:	1a001ac4 	.word	0x1a001ac4

1a0010f4 <Board_SystemInit>:
}

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0010f4:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0010f6:	f7ff ffab 	bl	1a001050 <Board_SetupMuxing>
   Board_SetupClocking();
1a0010fa:	f7ff ffc5 	bl	1a001088 <Board_SetupClocking>
1a0010fe:	bd08      	pop	{r3, pc}

1a001100 <ResetISR>:
void ResetISR(void) {
1a001100:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a001102:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001104:	4a16      	ldr	r2, [pc, #88]	; (1a001160 <ResetISR+0x60>)
1a001106:	4b17      	ldr	r3, [pc, #92]	; (1a001164 <ResetISR+0x64>)
1a001108:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00110a:	4a17      	ldr	r2, [pc, #92]	; (1a001168 <ResetISR+0x68>)
1a00110c:	3304      	adds	r3, #4
1a00110e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001110:	2300      	movs	r3, #0
1a001112:	e005      	b.n	1a001120 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001114:	f04f 31ff 	mov.w	r1, #4294967295
1a001118:	4a14      	ldr	r2, [pc, #80]	; (1a00116c <ResetISR+0x6c>)
1a00111a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00111e:	3301      	adds	r3, #1
1a001120:	2b07      	cmp	r3, #7
1a001122:	d9f7      	bls.n	1a001114 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a001124:	b662      	cpsie	i
    SystemInit();
1a001126:	f000 f829 	bl	1a00117c <SystemInit>
    SectionTableAddr = &__data_section_table;
1a00112a:	4b11      	ldr	r3, [pc, #68]	; (1a001170 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a00112c:	e007      	b.n	1a00113e <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a00112e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001132:	689a      	ldr	r2, [r3, #8]
1a001134:	6859      	ldr	r1, [r3, #4]
1a001136:	6818      	ldr	r0, [r3, #0]
1a001138:	f7ff f828 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a00113c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00113e:	4a0d      	ldr	r2, [pc, #52]	; (1a001174 <ResetISR+0x74>)
1a001140:	4293      	cmp	r3, r2
1a001142:	d3f4      	bcc.n	1a00112e <ResetISR+0x2e>
1a001144:	e006      	b.n	1a001154 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a001146:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001148:	6859      	ldr	r1, [r3, #4]
1a00114a:	f854 0b08 	ldr.w	r0, [r4], #8
1a00114e:	f7ff f82c 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a001152:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001154:	4a08      	ldr	r2, [pc, #32]	; (1a001178 <ResetISR+0x78>)
1a001156:	4293      	cmp	r3, r2
1a001158:	d3f5      	bcc.n	1a001146 <ResetISR+0x46>
    main();
1a00115a:	f7ff fa45 	bl	1a0005e8 <main>
1a00115e:	e7fe      	b.n	1a00115e <ResetISR+0x5e>
1a001160:	10df1000 	.word	0x10df1000
1a001164:	40053100 	.word	0x40053100
1a001168:	01dff7ff 	.word	0x01dff7ff
1a00116c:	e000e280 	.word	0xe000e280
1a001170:	1a000114 	.word	0x1a000114
1a001174:	1a000150 	.word	0x1a000150
1a001178:	1a000178 	.word	0x1a000178

1a00117c <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a00117c:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a00117e:	f7ff fd75 	bl	1a000c6c <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a001182:	f7ff ffb7 	bl	1a0010f4 <Board_SystemInit>
1a001186:	bd08      	pop	{r3, pc}

1a001188 <boardConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardConfig(void) {
1a001188:	b508      	push	{r3, lr}

   /* Read clock settings and update SystemCoreClock variable */
   SystemCoreClockUpdate();
1a00118a:	f7ff fabf 	bl	1a00070c <SystemCoreClockUpdate>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00118e:	f7ff ff4b 	bl	1a001028 <Board_Init>

   /* Inicializar el conteo de Ticks con resolución de 1ms, sin tickHook */
   tickConfig( 1, 0 );
1a001192:	2200      	movs	r2, #0
1a001194:	2001      	movs	r0, #1
1a001196:	2100      	movs	r1, #0
1a001198:	f000 f9b6 	bl	1a001508 <tickConfig>

   /* Inicializar GPIOs */
   gpioConfig( 0, GPIO_ENABLE );
1a00119c:	2105      	movs	r1, #5
1a00119e:	2000      	movs	r0, #0
1a0011a0:	f000 f8a2 	bl	1a0012e8 <gpioConfig>

   /* Configuración de pines de entrada para Teclas de la EDU-CIAA-NXP */
   gpioConfig( TEC1, GPIO_INPUT );
1a0011a4:	2100      	movs	r1, #0
1a0011a6:	2024      	movs	r0, #36	; 0x24
1a0011a8:	f000 f89e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( TEC2, GPIO_INPUT );
1a0011ac:	2100      	movs	r1, #0
1a0011ae:	2025      	movs	r0, #37	; 0x25
1a0011b0:	f000 f89a 	bl	1a0012e8 <gpioConfig>
   gpioConfig( TEC3, GPIO_INPUT );
1a0011b4:	2100      	movs	r1, #0
1a0011b6:	2026      	movs	r0, #38	; 0x26
1a0011b8:	f000 f896 	bl	1a0012e8 <gpioConfig>
   gpioConfig( TEC4, GPIO_INPUT );
1a0011bc:	2100      	movs	r1, #0
1a0011be:	2027      	movs	r0, #39	; 0x27
1a0011c0:	f000 f892 	bl	1a0012e8 <gpioConfig>

   /* Configuración de pines de salida para Leds de la EDU-CIAA-NXP */
   gpioConfig( LEDR, GPIO_OUTPUT );
1a0011c4:	2101      	movs	r1, #1
1a0011c6:	2028      	movs	r0, #40	; 0x28
1a0011c8:	f000 f88e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( LEDG, GPIO_OUTPUT );
1a0011cc:	2101      	movs	r1, #1
1a0011ce:	2029      	movs	r0, #41	; 0x29
1a0011d0:	f000 f88a 	bl	1a0012e8 <gpioConfig>
   gpioConfig( LEDB, GPIO_OUTPUT );
1a0011d4:	2101      	movs	r1, #1
1a0011d6:	202a      	movs	r0, #42	; 0x2a
1a0011d8:	f000 f886 	bl	1a0012e8 <gpioConfig>
   gpioConfig( LED1, GPIO_OUTPUT );
1a0011dc:	2101      	movs	r1, #1
1a0011de:	202b      	movs	r0, #43	; 0x2b
1a0011e0:	f000 f882 	bl	1a0012e8 <gpioConfig>
   gpioConfig( LED2, GPIO_OUTPUT );
1a0011e4:	2101      	movs	r1, #1
1a0011e6:	202c      	movs	r0, #44	; 0x2c
1a0011e8:	f000 f87e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( LED3, GPIO_OUTPUT );
1a0011ec:	2101      	movs	r1, #1
1a0011ee:	202d      	movs	r0, #45	; 0x2d
1a0011f0:	f000 f87a 	bl	1a0012e8 <gpioConfig>


   /* Configuración de pines de entrada de la CIAA-NXP */
   gpioConfig( DI0, GPIO_INPUT );
1a0011f4:	2100      	movs	r1, #0
1a0011f6:	202e      	movs	r0, #46	; 0x2e
1a0011f8:	f000 f876 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI1, GPIO_INPUT );
1a0011fc:	2100      	movs	r1, #0
1a0011fe:	202f      	movs	r0, #47	; 0x2f
1a001200:	f000 f872 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI2, GPIO_INPUT );
1a001204:	2100      	movs	r1, #0
1a001206:	2030      	movs	r0, #48	; 0x30
1a001208:	f000 f86e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI3, GPIO_INPUT );
1a00120c:	2100      	movs	r1, #0
1a00120e:	2031      	movs	r0, #49	; 0x31
1a001210:	f000 f86a 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI4, GPIO_INPUT );
1a001214:	2100      	movs	r1, #0
1a001216:	2032      	movs	r0, #50	; 0x32
1a001218:	f000 f866 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI5, GPIO_INPUT );
1a00121c:	2100      	movs	r1, #0
1a00121e:	2033      	movs	r0, #51	; 0x33
1a001220:	f000 f862 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI6, GPIO_INPUT );
1a001224:	2100      	movs	r1, #0
1a001226:	2034      	movs	r0, #52	; 0x34
1a001228:	f000 f85e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DI7, GPIO_INPUT );
1a00122c:	2100      	movs	r1, #0
1a00122e:	2035      	movs	r0, #53	; 0x35
1a001230:	f000 f85a 	bl	1a0012e8 <gpioConfig>

   /* Configuración de pines de salida de la CIAA-NXP */
   gpioConfig( DO0, GPIO_OUTPUT );
1a001234:	2101      	movs	r1, #1
1a001236:	2036      	movs	r0, #54	; 0x36
1a001238:	f000 f856 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO1, GPIO_OUTPUT );
1a00123c:	2101      	movs	r1, #1
1a00123e:	2037      	movs	r0, #55	; 0x37
1a001240:	f000 f852 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO2, GPIO_OUTPUT );
1a001244:	2101      	movs	r1, #1
1a001246:	2038      	movs	r0, #56	; 0x38
1a001248:	f000 f84e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO3, GPIO_OUTPUT );
1a00124c:	2101      	movs	r1, #1
1a00124e:	2039      	movs	r0, #57	; 0x39
1a001250:	f000 f84a 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO4, GPIO_OUTPUT );
1a001254:	2101      	movs	r1, #1
1a001256:	203a      	movs	r0, #58	; 0x3a
1a001258:	f000 f846 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO5, GPIO_OUTPUT );
1a00125c:	2101      	movs	r1, #1
1a00125e:	203b      	movs	r0, #59	; 0x3b
1a001260:	f000 f842 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO6, GPIO_OUTPUT );
1a001264:	2101      	movs	r1, #1
1a001266:	203c      	movs	r0, #60	; 0x3c
1a001268:	f000 f83e 	bl	1a0012e8 <gpioConfig>
   gpioConfig( DO7, GPIO_OUTPUT );
1a00126c:	2101      	movs	r1, #1
1a00126e:	203d      	movs	r0, #61	; 0x3d
1a001270:	f000 f83a 	bl	1a0012e8 <gpioConfig>
1a001274:	bd08      	pop	{r3, pc}

1a001276 <sAPI_NullFuncPtr>:
 * param:  void * - Not used
 * return: bool_t - Return always true
 */
bool_t sAPI_NullFuncPtr(void *ptr){
   return 1;
}
1a001276:	2001      	movs	r0, #1
1a001278:	4770      	bx	lr
1a00127a:	Address 0x1a00127a is out of bounds.


1a00127c <delay>:

/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay (tick_t time){
1a00127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001280:	4680      	mov	r8, r0
1a001282:	4689      	mov	r9, r1
    tick_t curTicks = tickRead();
1a001284:	f000 f97c 	bl	1a001580 <tickRead>
1a001288:	4606      	mov	r6, r0
1a00128a:	460f      	mov	r7, r1
    while ( (tickRead() - curTicks) < time/tickRateMS );
1a00128c:	f000 f978 	bl	1a001580 <tickRead>
1a001290:	1b84      	subs	r4, r0, r6
1a001292:	eb61 0507 	sbc.w	r5, r1, r7
1a001296:	4b06      	ldr	r3, [pc, #24]	; (1a0012b0 <delay+0x34>)
1a001298:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00129c:	4640      	mov	r0, r8
1a00129e:	4649      	mov	r1, r9
1a0012a0:	f000 fa0e 	bl	1a0016c0 <__aeabi_uldivmod>
1a0012a4:	428d      	cmp	r5, r1
1a0012a6:	bf08      	it	eq
1a0012a8:	4284      	cmpeq	r4, r0
1a0012aa:	d3ef      	bcc.n	1a00128c <delay+0x10>
 }
1a0012ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0012b0:	100000b0 	.word	0x100000b0

1a0012b4 <gpioObtainPinConfig>:
/*==================[internal functions definition]==========================*/

static void gpioObtainPinConfig( gpioMap_t pin,
                                int8_t *pinNamePort, int8_t *pinNamePin,
																int8_t *func, int8_t *gpioPort,
																int8_t *gpioPin ){
1a0012b4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsConfig[pin].pinName.port;
1a0012b6:	4d0b      	ldr	r5, [pc, #44]	; (1a0012e4 <gpioObtainPinConfig+0x30>)
1a0012b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0012bc:	182c      	adds	r4, r5, r0
1a0012be:	5628      	ldrsb	r0, [r5, r0]
1a0012c0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsConfig[pin].pinName.pin;
1a0012c2:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0012c6:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsConfig[pin].func;
1a0012c8:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0012cc:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsConfig[pin].gpio.port;
1a0012ce:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0012d2:	9b02      	ldr	r3, [sp, #8]
1a0012d4:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsConfig[pin].gpio.pin;
1a0012d6:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0012da:	9b03      	ldr	r3, [sp, #12]
1a0012dc:	701a      	strb	r2, [r3, #0]
}
1a0012de:	bc30      	pop	{r4, r5}
1a0012e0:	4770      	bx	lr
1a0012e2:	bf00      	nop
1a0012e4:	1a001b30 	.word	0x1a001b30

1a0012e8 <gpioConfig>:

/*==================[external functions definition]==========================*/

bool_t gpioConfig( gpioMap_t pin, gpioConfig_t config ){
1a0012e8:	b530      	push	{r4, r5, lr}
1a0012ea:	b085      	sub	sp, #20
1a0012ec:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0012ee:	2300      	movs	r3, #0
1a0012f0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0012f4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0012f8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0012fc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001300:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001304:	f10d 030b 	add.w	r3, sp, #11
1a001308:	9301      	str	r3, [sp, #4]
1a00130a:	ab03      	add	r3, sp, #12
1a00130c:	9300      	str	r3, [sp, #0]
1a00130e:	f10d 030d 	add.w	r3, sp, #13
1a001312:	f10d 020e 	add.w	r2, sp, #14
1a001316:	f10d 010f 	add.w	r1, sp, #15
1a00131a:	f7ff ffcb 	bl	1a0012b4 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   switch(config){
1a00131e:	2c05      	cmp	r4, #5
1a001320:	f200 8096 	bhi.w	1a001450 <gpioConfig+0x168>
1a001324:	e8df f004 	tbb	[pc, r4]
1a001328:	3d237109 	.word	0x3d237109
1a00132c:	0357      	.short	0x0357

      case GPIO_ENABLE:
		   /* Initializes GPIO */
		   Chip_GPIO_Init(LPC_GPIO_PORT);
1a00132e:	4849      	ldr	r0, [pc, #292]	; (1a001454 <gpioConfig+0x16c>)
1a001330:	f7ff fcc6 	bl	1a000cc0 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001334:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001336:	b005      	add	sp, #20
1a001338:	bd30      	pop	{r4, r5, pc}
         Chip_SCU_PinMux(
1a00133a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00133e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001342:	f89d 200d 	ldrb.w	r2, [sp, #13]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001346:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00134a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00134e:	4942      	ldr	r1, [pc, #264]	; (1a001458 <gpioConfig+0x170>)
1a001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001354:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001358:	2401      	movs	r4, #1
1a00135a:	2300      	movs	r3, #0
1a00135c:	fa04 f202 	lsl.w	r2, r4, r2
1a001360:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001364:	483b      	ldr	r0, [pc, #236]	; (1a001454 <gpioConfig+0x16c>)
1a001366:	f7ff fcac 	bl	1a000cc2 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00136a:	4620      	mov	r0, r4
      break;
1a00136c:	e7e3      	b.n	1a001336 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00136e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001372:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001376:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00137a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00137e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001382:	4935      	ldr	r1, [pc, #212]	; (1a001458 <gpioConfig+0x170>)
1a001384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001388:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00138c:	2401      	movs	r4, #1
1a00138e:	2300      	movs	r3, #0
1a001390:	fa04 f202 	lsl.w	r2, r4, r2
1a001394:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001398:	482e      	ldr	r0, [pc, #184]	; (1a001454 <gpioConfig+0x16c>)
1a00139a:	f7ff fc92 	bl	1a000cc2 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a00139e:	4620      	mov	r0, r4
      break;
1a0013a0:	e7c9      	b.n	1a001336 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0013a2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013a6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013aa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013ae:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0013b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013b6:	4928      	ldr	r1, [pc, #160]	; (1a001458 <gpioConfig+0x170>)
1a0013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013bc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013c0:	2401      	movs	r4, #1
1a0013c2:	2300      	movs	r3, #0
1a0013c4:	fa04 f202 	lsl.w	r2, r4, r2
1a0013c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a0013cc:	4821      	ldr	r0, [pc, #132]	; (1a001454 <gpioConfig+0x16c>)
1a0013ce:	f7ff fc78 	bl	1a000cc2 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a0013d2:	4620      	mov	r0, r4
      break;
1a0013d4:	e7af      	b.n	1a001336 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a0013d6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0013da:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0013de:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0013e2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0013e6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0013ea:	491b      	ldr	r1, [pc, #108]	; (1a001458 <gpioConfig+0x170>)
1a0013ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0013f0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0013f4:	2401      	movs	r4, #1
1a0013f6:	2300      	movs	r3, #0
1a0013f8:	fa04 f202 	lsl.w	r2, r4, r2
1a0013fc:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001400:	4814      	ldr	r0, [pc, #80]	; (1a001454 <gpioConfig+0x16c>)
1a001402:	f7ff fc5e 	bl	1a000cc2 <Chip_GPIO_SetDir>
   bool_t ret_val     = 1;
1a001406:	4620      	mov	r0, r4
      break;
1a001408:	e795      	b.n	1a001336 <gpioConfig+0x4e>
         Chip_SCU_PinMux(
1a00140a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00140e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001412:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001416:	f042 0290 	orr.w	r2, r2, #144	; 0x90
1a00141a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00141e:	490e      	ldr	r1, [pc, #56]	; (1a001458 <gpioConfig+0x170>)
1a001420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001424:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001428:	2401      	movs	r4, #1
1a00142a:	4d0a      	ldr	r5, [pc, #40]	; (1a001454 <gpioConfig+0x16c>)
1a00142c:	4623      	mov	r3, r4
1a00142e:	fa04 f202 	lsl.w	r2, r4, r2
1a001432:	f89d 100c 	ldrb.w	r1, [sp, #12]
1a001436:	4628      	mov	r0, r5
1a001438:	f7ff fc43 	bl	1a000cc2 <Chip_GPIO_SetDir>
         Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00143c:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a001440:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001444:	eb05 1542 	add.w	r5, r5, r2, lsl #5
1a001448:	2200      	movs	r2, #0
1a00144a:	54ea      	strb	r2, [r5, r3]
   bool_t ret_val     = 1;
1a00144c:	4620      	mov	r0, r4
1a00144e:	e772      	b.n	1a001336 <gpioConfig+0x4e>
         ret_val = 0;
1a001450:	2000      	movs	r0, #0
1a001452:	e770      	b.n	1a001336 <gpioConfig+0x4e>
1a001454:	400f4000 	.word	0x400f4000
1a001458:	40086000 	.word	0x40086000

1a00145c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value ){
1a00145c:	b510      	push	{r4, lr}
1a00145e:	b084      	sub	sp, #16
1a001460:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001462:	2300      	movs	r3, #0
1a001464:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001468:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00146c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001470:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001474:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a001478:	f10d 030b 	add.w	r3, sp, #11
1a00147c:	9301      	str	r3, [sp, #4]
1a00147e:	ab03      	add	r3, sp, #12
1a001480:	9300      	str	r3, [sp, #0]
1a001482:	f10d 030d 	add.w	r3, sp, #13
1a001486:	f10d 020e 	add.w	r2, sp, #14
1a00148a:	f10d 010f 	add.w	r1, sp, #15
1a00148e:	f7ff ff11 	bl	1a0012b4 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001492:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001496:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a00149a:	3400      	adds	r4, #0
1a00149c:	bf18      	it	ne
1a00149e:	2401      	movne	r4, #1
1a0014a0:	015b      	lsls	r3, r3, #5
1a0014a2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0014a6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0014aa:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a0014ac:	2001      	movs	r0, #1
1a0014ae:	b004      	add	sp, #16
1a0014b0:	bd10      	pop	{r4, pc}

1a0014b2 <gpioRead>:


bool_t gpioRead( gpioMap_t pin ){
1a0014b2:	b500      	push	{lr}
1a0014b4:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0014b6:	2300      	movs	r3, #0
1a0014b8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0014bc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0014c0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0014c4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0014c8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinConfig( pin, &pinNamePort, &pinNamePin, &func,
1a0014cc:	f10d 030b 	add.w	r3, sp, #11
1a0014d0:	9301      	str	r3, [sp, #4]
1a0014d2:	ab03      	add	r3, sp, #12
1a0014d4:	9300      	str	r3, [sp, #0]
1a0014d6:	f10d 030d 	add.w	r3, sp, #13
1a0014da:	f10d 020e 	add.w	r2, sp, #14
1a0014de:	f10d 010f 	add.w	r1, sp, #15
1a0014e2:	f7ff fee7 	bl	1a0012b4 <gpioObtainPinConfig>
                           &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0014e6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0014ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
   return (bool) pGPIO->B[port][pin];
1a0014ee:	015b      	lsls	r3, r3, #5
1a0014f0:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0014f4:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0014f8:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a0014fa:	3000      	adds	r0, #0
1a0014fc:	bf18      	it	ne
1a0014fe:	2001      	movne	r0, #1
1a001500:	b005      	add	sp, #20
1a001502:	f85d fb04 	ldr.w	pc, [sp], #4
1a001506:	Address 0x1a001506 is out of bounds.


1a001508 <tickConfig>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* Tick rate configuration 1 to 50 ms */
bool_t tickConfig(tick_t tickRateMSvalue, sAPI_FuncPtr_t tickHook ) {
1a001508:	b508      	push	{r3, lr}

   bool_t ret_val = 1;
   tick_t tickRateHz = 0;

   if( tickHook ){
1a00150a:	b112      	cbz	r2, 1a001512 <tickConfig+0xa>
1a00150c:	4613      	mov	r3, r2
      tickHookFunction = tickHook;
1a00150e:	4a17      	ldr	r2, [pc, #92]	; (1a00156c <tickConfig+0x64>)
1a001510:	6013      	str	r3, [r2, #0]
   }

   if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ){
1a001512:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001516:	f141 33ff 	adc.w	r3, r1, #4294967295
1a00151a:	2b00      	cmp	r3, #0
1a00151c:	bf08      	it	eq
1a00151e:	2a32      	cmpeq	r2, #50	; 0x32
1a001520:	d220      	bcs.n	1a001564 <tickConfig+0x5c>
1a001522:	4602      	mov	r2, r0
1a001524:	460b      	mov	r3, r1

		tickRateMS = tickRateMSvalue;
1a001526:	4912      	ldr	r1, [pc, #72]	; (1a001570 <tickConfig+0x68>)
1a001528:	e9c1 2300 	strd	r2, r3, [r1]
      tickRateHz = 1000 => 1000 ticks per second =>  1 ms tick
      tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
      tickRateHz =  100 =>  100 ticks per second => 10 ms tick
      tickRateHz =   20 =>   20 ticks per second => 50 ms tick
      */
      tickRateHz = 1000 / tickRateMSvalue;
1a00152c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001530:	2100      	movs	r1, #0
1a001532:	f000 f8c5 	bl	1a0016c0 <__aeabi_uldivmod>

      /* Init SysTick interrupt, tickRateHz ticks per second */
      SysTick_Config( SystemCoreClock / tickRateHz);
1a001536:	4602      	mov	r2, r0
1a001538:	460b      	mov	r3, r1
1a00153a:	490e      	ldr	r1, [pc, #56]	; (1a001574 <tickConfig+0x6c>)
1a00153c:	6808      	ldr	r0, [r1, #0]
1a00153e:	2100      	movs	r1, #0
1a001540:	f000 f8be 	bl	1a0016c0 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001544:	3801      	subs	r0, #1
1a001546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00154a:	d20d      	bcs.n	1a001568 <tickConfig+0x60>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00154c:	4b0a      	ldr	r3, [pc, #40]	; (1a001578 <tickConfig+0x70>)
1a00154e:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a001550:	21e0      	movs	r1, #224	; 0xe0
1a001552:	4a0a      	ldr	r2, [pc, #40]	; (1a00157c <tickConfig+0x74>)
1a001554:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001558:	2200      	movs	r2, #0
1a00155a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00155c:	2207      	movs	r2, #7
1a00155e:	601a      	str	r2, [r3, #0]
   bool_t ret_val = 1;
1a001560:	2001      	movs	r0, #1
1a001562:	bd08      	pop	{r3, pc}
   }
   else{
      /* Error, tickRateMS variable not in range (1 <= tickRateMS <= 50) */
      ret_val = 0;
1a001564:	2000      	movs	r0, #0
1a001566:	bd08      	pop	{r3, pc}
   bool_t ret_val = 1;
1a001568:	2001      	movs	r0, #1
   }

   return ret_val;
}
1a00156a:	bd08      	pop	{r3, pc}
1a00156c:	1000004c 	.word	0x1000004c
1a001570:	100000b0 	.word	0x100000b0
1a001574:	100000a4 	.word	0x100000a4
1a001578:	e000e010 	.word	0xe000e010
1a00157c:	e000ed00 	.word	0xe000ed00

1a001580 <tickRead>:


/* Read Tick Counter */
tick_t tickRead( void ) {
   return tickCounter;
}
1a001580:	4b01      	ldr	r3, [pc, #4]	; (1a001588 <tickRead+0x8>)
1a001582:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001586:	4770      	bx	lr
1a001588:	100000a8 	.word	0x100000a8

1a00158c <SysTick_Handler>:
/*==================[ISR external functions definition]======================*/

//__attribute__ ((section(".after_vectors")))

/* SysTick Timer ISR Handler */
void SysTick_Handler(void) {
1a00158c:	b508      	push	{r3, lr}
   tickCounter++;
1a00158e:	4906      	ldr	r1, [pc, #24]	; (1a0015a8 <SysTick_Handler+0x1c>)
1a001590:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001594:	3201      	adds	r2, #1
1a001596:	f143 0300 	adc.w	r3, r3, #0
1a00159a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Execute Tick Hook function */
	(* tickHookFunction )( 0 );
1a00159e:	4b03      	ldr	r3, [pc, #12]	; (1a0015ac <SysTick_Handler+0x20>)
1a0015a0:	681b      	ldr	r3, [r3, #0]
1a0015a2:	2000      	movs	r0, #0
1a0015a4:	4798      	blx	r3
1a0015a6:	bd08      	pop	{r3, pc}
1a0015a8:	100000a8 	.word	0x100000a8
1a0015ac:	1000004c 	.word	0x1000004c

1a0015b0 <errorOcurred>:
/*==================[internal functions definition]==========================*/

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred(void){
1a0015b0:	e7fe      	b.n	1a0015b0 <errorOcurred>

1a0015b2 <doNothing>:
   while(1);
}

static void doNothing(void){
1a0015b2:	4770      	bx	lr

1a0015b4 <TIMER0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void){
1a0015b4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015b6:	2400      	movs	r4, #0
1a0015b8:	e001      	b.n	1a0015be <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0015ba:	3401      	adds	r4, #1
1a0015bc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015be:	2c03      	cmp	r4, #3
1a0015c0:	d812      	bhi.n	1a0015e8 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ){
1a0015c2:	b265      	sxtb	r5, r4
 * @note   Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015c4:	4b09      	ldr	r3, [pc, #36]	; (1a0015ec <TIMER0_IRQHandler+0x38>)
1a0015c6:	681a      	ldr	r2, [r3, #0]
1a0015c8:	f004 010f 	and.w	r1, r4, #15
1a0015cc:	2301      	movs	r3, #1
1a0015ce:	408b      	lsls	r3, r1
1a0015d0:	421a      	tst	r2, r3
1a0015d2:	d0f2      	beq.n	1a0015ba <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a0015d4:	4b06      	ldr	r3, [pc, #24]	; (1a0015f0 <TIMER0_IRQHandler+0x3c>)
1a0015d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0015da:	4798      	blx	r3
 * @return Nothing
 * @note   Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0015dc:	2301      	movs	r3, #1
1a0015de:	fa03 f505 	lsl.w	r5, r3, r5
1a0015e2:	4b02      	ldr	r3, [pc, #8]	; (1a0015ec <TIMER0_IRQHandler+0x38>)
1a0015e4:	601d      	str	r5, [r3, #0]
1a0015e6:	e7e8      	b.n	1a0015ba <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0015e8:	bd38      	pop	{r3, r4, r5, pc}
1a0015ea:	bf00      	nop
1a0015ec:	40084000 	.word	0x40084000
1a0015f0:	10000050 	.word	0x10000050

1a0015f4 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void ){
1a0015f4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015f6:	2400      	movs	r4, #0
1a0015f8:	e001      	b.n	1a0015fe <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a0015fa:	3401      	adds	r4, #1
1a0015fc:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015fe:	2c03      	cmp	r4, #3
1a001600:	d813      	bhi.n	1a00162a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ){
1a001602:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001604:	4b09      	ldr	r3, [pc, #36]	; (1a00162c <TIMER1_IRQHandler+0x38>)
1a001606:	681a      	ldr	r2, [r3, #0]
1a001608:	f004 010f 	and.w	r1, r4, #15
1a00160c:	2301      	movs	r3, #1
1a00160e:	408b      	lsls	r3, r1
1a001610:	421a      	tst	r2, r3
1a001612:	d0f2      	beq.n	1a0015fa <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001614:	1d23      	adds	r3, r4, #4
1a001616:	4a06      	ldr	r2, [pc, #24]	; (1a001630 <TIMER1_IRQHandler+0x3c>)
1a001618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00161c:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a00161e:	2301      	movs	r3, #1
1a001620:	fa03 f505 	lsl.w	r5, r3, r5
1a001624:	4b01      	ldr	r3, [pc, #4]	; (1a00162c <TIMER1_IRQHandler+0x38>)
1a001626:	601d      	str	r5, [r3, #0]
1a001628:	e7e7      	b.n	1a0015fa <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00162a:	bd38      	pop	{r3, r4, r5, pc}
1a00162c:	40085000 	.word	0x40085000
1a001630:	10000050 	.word	0x10000050

1a001634 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void ){
1a001634:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001636:	2400      	movs	r4, #0
1a001638:	e001      	b.n	1a00163e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a00163a:	3401      	adds	r4, #1
1a00163c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00163e:	2c03      	cmp	r4, #3
1a001640:	d814      	bhi.n	1a00166c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ){
1a001642:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001644:	4b0a      	ldr	r3, [pc, #40]	; (1a001670 <TIMER2_IRQHandler+0x3c>)
1a001646:	681a      	ldr	r2, [r3, #0]
1a001648:	f004 010f 	and.w	r1, r4, #15
1a00164c:	2301      	movs	r3, #1
1a00164e:	408b      	lsls	r3, r1
1a001650:	421a      	tst	r2, r3
1a001652:	d0f2      	beq.n	1a00163a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001654:	f104 0308 	add.w	r3, r4, #8
1a001658:	4a06      	ldr	r2, [pc, #24]	; (1a001674 <TIMER2_IRQHandler+0x40>)
1a00165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00165e:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a001660:	2301      	movs	r3, #1
1a001662:	fa03 f505 	lsl.w	r5, r3, r5
1a001666:	4b02      	ldr	r3, [pc, #8]	; (1a001670 <TIMER2_IRQHandler+0x3c>)
1a001668:	601d      	str	r5, [r3, #0]
1a00166a:	e7e6      	b.n	1a00163a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00166c:	bd38      	pop	{r3, r4, r5, pc}
1a00166e:	bf00      	nop
1a001670:	400c3000 	.word	0x400c3000
1a001674:	10000050 	.word	0x10000050

1a001678 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void ){
1a001678:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00167a:	2400      	movs	r4, #0
1a00167c:	e001      	b.n	1a001682 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ){
1a00167e:	3401      	adds	r4, #1
1a001680:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001682:	2c03      	cmp	r4, #3
1a001684:	d814      	bhi.n	1a0016b0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)){
1a001686:	b265      	sxtb	r5, r4
   return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001688:	4b0a      	ldr	r3, [pc, #40]	; (1a0016b4 <TIMER3_IRQHandler+0x3c>)
1a00168a:	681a      	ldr	r2, [r3, #0]
1a00168c:	f004 010f 	and.w	r1, r4, #15
1a001690:	2301      	movs	r3, #1
1a001692:	408b      	lsls	r3, r1
1a001694:	421a      	tst	r2, r3
1a001696:	d0f2      	beq.n	1a00167e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])();
1a001698:	f104 030c 	add.w	r3, r4, #12
1a00169c:	4a06      	ldr	r2, [pc, #24]	; (1a0016b8 <TIMER3_IRQHandler+0x40>)
1a00169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0016a2:	4798      	blx	r3
   pTMR->IR = TIMER_IR_CLR(matchnum);
1a0016a4:	2301      	movs	r3, #1
1a0016a6:	fa03 f505 	lsl.w	r5, r3, r5
1a0016aa:	4b02      	ldr	r3, [pc, #8]	; (1a0016b4 <TIMER3_IRQHandler+0x3c>)
1a0016ac:	601d      	str	r5, [r3, #0]
1a0016ae:	e7e6      	b.n	1a00167e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0016b0:	bd38      	pop	{r3, r4, r5, pc}
1a0016b2:	bf00      	nop
1a0016b4:	400c4000 	.word	0x400c4000
1a0016b8:	10000050 	.word	0x10000050

1a0016bc <UART2_IRQHandler>:
}

/* 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26) */
void UART2_IRQHandler(void){
1a0016bc:	4770      	bx	lr

1a0016be <UART3_IRQHandler>:
}

/* 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27) */
void UART3_IRQHandler(void){
1a0016be:	4770      	bx	lr

1a0016c0 <__aeabi_uldivmod>:
1a0016c0:	b953      	cbnz	r3, 1a0016d8 <__aeabi_uldivmod+0x18>
1a0016c2:	b94a      	cbnz	r2, 1a0016d8 <__aeabi_uldivmod+0x18>
1a0016c4:	2900      	cmp	r1, #0
1a0016c6:	bf08      	it	eq
1a0016c8:	2800      	cmpeq	r0, #0
1a0016ca:	bf1c      	itt	ne
1a0016cc:	f04f 31ff 	movne.w	r1, #4294967295
1a0016d0:	f04f 30ff 	movne.w	r0, #4294967295
1a0016d4:	f000 b97a 	b.w	1a0019cc <__aeabi_idiv0>
1a0016d8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0016dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0016e0:	f000 f806 	bl	1a0016f0 <__udivmoddi4>
1a0016e4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0016e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0016ec:	b004      	add	sp, #16
1a0016ee:	4770      	bx	lr

1a0016f0 <__udivmoddi4>:
1a0016f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0016f4:	468c      	mov	ip, r1
1a0016f6:	460d      	mov	r5, r1
1a0016f8:	4604      	mov	r4, r0
1a0016fa:	9e08      	ldr	r6, [sp, #32]
1a0016fc:	2b00      	cmp	r3, #0
1a0016fe:	d151      	bne.n	1a0017a4 <__udivmoddi4+0xb4>
1a001700:	428a      	cmp	r2, r1
1a001702:	4617      	mov	r7, r2
1a001704:	d96d      	bls.n	1a0017e2 <__udivmoddi4+0xf2>
1a001706:	fab2 fe82 	clz	lr, r2
1a00170a:	f1be 0f00 	cmp.w	lr, #0
1a00170e:	d00b      	beq.n	1a001728 <__udivmoddi4+0x38>
1a001710:	f1ce 0c20 	rsb	ip, lr, #32
1a001714:	fa01 f50e 	lsl.w	r5, r1, lr
1a001718:	fa20 fc0c 	lsr.w	ip, r0, ip
1a00171c:	fa02 f70e 	lsl.w	r7, r2, lr
1a001720:	ea4c 0c05 	orr.w	ip, ip, r5
1a001724:	fa00 f40e 	lsl.w	r4, r0, lr
1a001728:	ea4f 4a17 	mov.w	sl, r7, lsr #16
1a00172c:	0c25      	lsrs	r5, r4, #16
1a00172e:	fbbc f8fa 	udiv	r8, ip, sl
1a001732:	fa1f f987 	uxth.w	r9, r7
1a001736:	fb0a cc18 	mls	ip, sl, r8, ip
1a00173a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
1a00173e:	fb08 f309 	mul.w	r3, r8, r9
1a001742:	42ab      	cmp	r3, r5
1a001744:	d90a      	bls.n	1a00175c <__udivmoddi4+0x6c>
1a001746:	19ed      	adds	r5, r5, r7
1a001748:	f108 32ff 	add.w	r2, r8, #4294967295
1a00174c:	f080 8123 	bcs.w	1a001996 <__udivmoddi4+0x2a6>
1a001750:	42ab      	cmp	r3, r5
1a001752:	f240 8120 	bls.w	1a001996 <__udivmoddi4+0x2a6>
1a001756:	f1a8 0802 	sub.w	r8, r8, #2
1a00175a:	443d      	add	r5, r7
1a00175c:	1aed      	subs	r5, r5, r3
1a00175e:	b2a4      	uxth	r4, r4
1a001760:	fbb5 f0fa 	udiv	r0, r5, sl
1a001764:	fb0a 5510 	mls	r5, sl, r0, r5
1a001768:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
1a00176c:	fb00 f909 	mul.w	r9, r0, r9
1a001770:	45a1      	cmp	r9, r4
1a001772:	d909      	bls.n	1a001788 <__udivmoddi4+0x98>
1a001774:	19e4      	adds	r4, r4, r7
1a001776:	f100 33ff 	add.w	r3, r0, #4294967295
1a00177a:	f080 810a 	bcs.w	1a001992 <__udivmoddi4+0x2a2>
1a00177e:	45a1      	cmp	r9, r4
1a001780:	f240 8107 	bls.w	1a001992 <__udivmoddi4+0x2a2>
1a001784:	3802      	subs	r0, #2
1a001786:	443c      	add	r4, r7
1a001788:	eba4 0409 	sub.w	r4, r4, r9
1a00178c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001790:	2100      	movs	r1, #0
1a001792:	2e00      	cmp	r6, #0
1a001794:	d061      	beq.n	1a00185a <__udivmoddi4+0x16a>
1a001796:	fa24 f40e 	lsr.w	r4, r4, lr
1a00179a:	2300      	movs	r3, #0
1a00179c:	6034      	str	r4, [r6, #0]
1a00179e:	6073      	str	r3, [r6, #4]
1a0017a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017a4:	428b      	cmp	r3, r1
1a0017a6:	d907      	bls.n	1a0017b8 <__udivmoddi4+0xc8>
1a0017a8:	2e00      	cmp	r6, #0
1a0017aa:	d054      	beq.n	1a001856 <__udivmoddi4+0x166>
1a0017ac:	2100      	movs	r1, #0
1a0017ae:	e886 0021 	stmia.w	r6, {r0, r5}
1a0017b2:	4608      	mov	r0, r1
1a0017b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017b8:	fab3 f183 	clz	r1, r3
1a0017bc:	2900      	cmp	r1, #0
1a0017be:	f040 808e 	bne.w	1a0018de <__udivmoddi4+0x1ee>
1a0017c2:	42ab      	cmp	r3, r5
1a0017c4:	d302      	bcc.n	1a0017cc <__udivmoddi4+0xdc>
1a0017c6:	4282      	cmp	r2, r0
1a0017c8:	f200 80fa 	bhi.w	1a0019c0 <__udivmoddi4+0x2d0>
1a0017cc:	1a84      	subs	r4, r0, r2
1a0017ce:	eb65 0503 	sbc.w	r5, r5, r3
1a0017d2:	2001      	movs	r0, #1
1a0017d4:	46ac      	mov	ip, r5
1a0017d6:	2e00      	cmp	r6, #0
1a0017d8:	d03f      	beq.n	1a00185a <__udivmoddi4+0x16a>
1a0017da:	e886 1010 	stmia.w	r6, {r4, ip}
1a0017de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0017e2:	b912      	cbnz	r2, 1a0017ea <__udivmoddi4+0xfa>
1a0017e4:	2701      	movs	r7, #1
1a0017e6:	fbb7 f7f2 	udiv	r7, r7, r2
1a0017ea:	fab7 fe87 	clz	lr, r7
1a0017ee:	f1be 0f00 	cmp.w	lr, #0
1a0017f2:	d134      	bne.n	1a00185e <__udivmoddi4+0x16e>
1a0017f4:	1beb      	subs	r3, r5, r7
1a0017f6:	0c3a      	lsrs	r2, r7, #16
1a0017f8:	fa1f fc87 	uxth.w	ip, r7
1a0017fc:	2101      	movs	r1, #1
1a0017fe:	fbb3 f8f2 	udiv	r8, r3, r2
1a001802:	0c25      	lsrs	r5, r4, #16
1a001804:	fb02 3318 	mls	r3, r2, r8, r3
1a001808:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a00180c:	fb0c f308 	mul.w	r3, ip, r8
1a001810:	42ab      	cmp	r3, r5
1a001812:	d907      	bls.n	1a001824 <__udivmoddi4+0x134>
1a001814:	19ed      	adds	r5, r5, r7
1a001816:	f108 30ff 	add.w	r0, r8, #4294967295
1a00181a:	d202      	bcs.n	1a001822 <__udivmoddi4+0x132>
1a00181c:	42ab      	cmp	r3, r5
1a00181e:	f200 80d1 	bhi.w	1a0019c4 <__udivmoddi4+0x2d4>
1a001822:	4680      	mov	r8, r0
1a001824:	1aed      	subs	r5, r5, r3
1a001826:	b2a3      	uxth	r3, r4
1a001828:	fbb5 f0f2 	udiv	r0, r5, r2
1a00182c:	fb02 5510 	mls	r5, r2, r0, r5
1a001830:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
1a001834:	fb0c fc00 	mul.w	ip, ip, r0
1a001838:	45a4      	cmp	ip, r4
1a00183a:	d907      	bls.n	1a00184c <__udivmoddi4+0x15c>
1a00183c:	19e4      	adds	r4, r4, r7
1a00183e:	f100 33ff 	add.w	r3, r0, #4294967295
1a001842:	d202      	bcs.n	1a00184a <__udivmoddi4+0x15a>
1a001844:	45a4      	cmp	ip, r4
1a001846:	f200 80b8 	bhi.w	1a0019ba <__udivmoddi4+0x2ca>
1a00184a:	4618      	mov	r0, r3
1a00184c:	eba4 040c 	sub.w	r4, r4, ip
1a001850:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
1a001854:	e79d      	b.n	1a001792 <__udivmoddi4+0xa2>
1a001856:	4631      	mov	r1, r6
1a001858:	4630      	mov	r0, r6
1a00185a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00185e:	f1ce 0420 	rsb	r4, lr, #32
1a001862:	fa05 f30e 	lsl.w	r3, r5, lr
1a001866:	fa07 f70e 	lsl.w	r7, r7, lr
1a00186a:	fa20 f804 	lsr.w	r8, r0, r4
1a00186e:	0c3a      	lsrs	r2, r7, #16
1a001870:	fa25 f404 	lsr.w	r4, r5, r4
1a001874:	ea48 0803 	orr.w	r8, r8, r3
1a001878:	fbb4 f1f2 	udiv	r1, r4, r2
1a00187c:	ea4f 4518 	mov.w	r5, r8, lsr #16
1a001880:	fb02 4411 	mls	r4, r2, r1, r4
1a001884:	fa1f fc87 	uxth.w	ip, r7
1a001888:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
1a00188c:	fb01 f30c 	mul.w	r3, r1, ip
1a001890:	42ab      	cmp	r3, r5
1a001892:	fa00 f40e 	lsl.w	r4, r0, lr
1a001896:	d909      	bls.n	1a0018ac <__udivmoddi4+0x1bc>
1a001898:	19ed      	adds	r5, r5, r7
1a00189a:	f101 30ff 	add.w	r0, r1, #4294967295
1a00189e:	f080 808a 	bcs.w	1a0019b6 <__udivmoddi4+0x2c6>
1a0018a2:	42ab      	cmp	r3, r5
1a0018a4:	f240 8087 	bls.w	1a0019b6 <__udivmoddi4+0x2c6>
1a0018a8:	3902      	subs	r1, #2
1a0018aa:	443d      	add	r5, r7
1a0018ac:	1aeb      	subs	r3, r5, r3
1a0018ae:	fa1f f588 	uxth.w	r5, r8
1a0018b2:	fbb3 f0f2 	udiv	r0, r3, r2
1a0018b6:	fb02 3310 	mls	r3, r2, r0, r3
1a0018ba:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
1a0018be:	fb00 f30c 	mul.w	r3, r0, ip
1a0018c2:	42ab      	cmp	r3, r5
1a0018c4:	d907      	bls.n	1a0018d6 <__udivmoddi4+0x1e6>
1a0018c6:	19ed      	adds	r5, r5, r7
1a0018c8:	f100 38ff 	add.w	r8, r0, #4294967295
1a0018cc:	d26f      	bcs.n	1a0019ae <__udivmoddi4+0x2be>
1a0018ce:	42ab      	cmp	r3, r5
1a0018d0:	d96d      	bls.n	1a0019ae <__udivmoddi4+0x2be>
1a0018d2:	3802      	subs	r0, #2
1a0018d4:	443d      	add	r5, r7
1a0018d6:	1aeb      	subs	r3, r5, r3
1a0018d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0018dc:	e78f      	b.n	1a0017fe <__udivmoddi4+0x10e>
1a0018de:	f1c1 0720 	rsb	r7, r1, #32
1a0018e2:	fa22 f807 	lsr.w	r8, r2, r7
1a0018e6:	408b      	lsls	r3, r1
1a0018e8:	fa05 f401 	lsl.w	r4, r5, r1
1a0018ec:	ea48 0303 	orr.w	r3, r8, r3
1a0018f0:	fa20 fe07 	lsr.w	lr, r0, r7
1a0018f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
1a0018f8:	40fd      	lsrs	r5, r7
1a0018fa:	ea4e 0e04 	orr.w	lr, lr, r4
1a0018fe:	fbb5 f9fc 	udiv	r9, r5, ip
1a001902:	ea4f 441e 	mov.w	r4, lr, lsr #16
1a001906:	fb0c 5519 	mls	r5, ip, r9, r5
1a00190a:	fa1f f883 	uxth.w	r8, r3
1a00190e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
1a001912:	fb09 f408 	mul.w	r4, r9, r8
1a001916:	42ac      	cmp	r4, r5
1a001918:	fa02 f201 	lsl.w	r2, r2, r1
1a00191c:	fa00 fa01 	lsl.w	sl, r0, r1
1a001920:	d908      	bls.n	1a001934 <__udivmoddi4+0x244>
1a001922:	18ed      	adds	r5, r5, r3
1a001924:	f109 30ff 	add.w	r0, r9, #4294967295
1a001928:	d243      	bcs.n	1a0019b2 <__udivmoddi4+0x2c2>
1a00192a:	42ac      	cmp	r4, r5
1a00192c:	d941      	bls.n	1a0019b2 <__udivmoddi4+0x2c2>
1a00192e:	f1a9 0902 	sub.w	r9, r9, #2
1a001932:	441d      	add	r5, r3
1a001934:	1b2d      	subs	r5, r5, r4
1a001936:	fa1f fe8e 	uxth.w	lr, lr
1a00193a:	fbb5 f0fc 	udiv	r0, r5, ip
1a00193e:	fb0c 5510 	mls	r5, ip, r0, r5
1a001942:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
1a001946:	fb00 f808 	mul.w	r8, r0, r8
1a00194a:	45a0      	cmp	r8, r4
1a00194c:	d907      	bls.n	1a00195e <__udivmoddi4+0x26e>
1a00194e:	18e4      	adds	r4, r4, r3
1a001950:	f100 35ff 	add.w	r5, r0, #4294967295
1a001954:	d229      	bcs.n	1a0019aa <__udivmoddi4+0x2ba>
1a001956:	45a0      	cmp	r8, r4
1a001958:	d927      	bls.n	1a0019aa <__udivmoddi4+0x2ba>
1a00195a:	3802      	subs	r0, #2
1a00195c:	441c      	add	r4, r3
1a00195e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001962:	eba4 0408 	sub.w	r4, r4, r8
1a001966:	fba0 8902 	umull	r8, r9, r0, r2
1a00196a:	454c      	cmp	r4, r9
1a00196c:	46c6      	mov	lr, r8
1a00196e:	464d      	mov	r5, r9
1a001970:	d315      	bcc.n	1a00199e <__udivmoddi4+0x2ae>
1a001972:	d012      	beq.n	1a00199a <__udivmoddi4+0x2aa>
1a001974:	b156      	cbz	r6, 1a00198c <__udivmoddi4+0x29c>
1a001976:	ebba 030e 	subs.w	r3, sl, lr
1a00197a:	eb64 0405 	sbc.w	r4, r4, r5
1a00197e:	fa04 f707 	lsl.w	r7, r4, r7
1a001982:	40cb      	lsrs	r3, r1
1a001984:	431f      	orrs	r7, r3
1a001986:	40cc      	lsrs	r4, r1
1a001988:	6037      	str	r7, [r6, #0]
1a00198a:	6074      	str	r4, [r6, #4]
1a00198c:	2100      	movs	r1, #0
1a00198e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001992:	4618      	mov	r0, r3
1a001994:	e6f8      	b.n	1a001788 <__udivmoddi4+0x98>
1a001996:	4690      	mov	r8, r2
1a001998:	e6e0      	b.n	1a00175c <__udivmoddi4+0x6c>
1a00199a:	45c2      	cmp	sl, r8
1a00199c:	d2ea      	bcs.n	1a001974 <__udivmoddi4+0x284>
1a00199e:	ebb8 0e02 	subs.w	lr, r8, r2
1a0019a2:	eb69 0503 	sbc.w	r5, r9, r3
1a0019a6:	3801      	subs	r0, #1
1a0019a8:	e7e4      	b.n	1a001974 <__udivmoddi4+0x284>
1a0019aa:	4628      	mov	r0, r5
1a0019ac:	e7d7      	b.n	1a00195e <__udivmoddi4+0x26e>
1a0019ae:	4640      	mov	r0, r8
1a0019b0:	e791      	b.n	1a0018d6 <__udivmoddi4+0x1e6>
1a0019b2:	4681      	mov	r9, r0
1a0019b4:	e7be      	b.n	1a001934 <__udivmoddi4+0x244>
1a0019b6:	4601      	mov	r1, r0
1a0019b8:	e778      	b.n	1a0018ac <__udivmoddi4+0x1bc>
1a0019ba:	3802      	subs	r0, #2
1a0019bc:	443c      	add	r4, r7
1a0019be:	e745      	b.n	1a00184c <__udivmoddi4+0x15c>
1a0019c0:	4608      	mov	r0, r1
1a0019c2:	e708      	b.n	1a0017d6 <__udivmoddi4+0xe6>
1a0019c4:	f1a8 0802 	sub.w	r8, r8, #2
1a0019c8:	443d      	add	r5, r7
1a0019ca:	e72b      	b.n	1a001824 <__udivmoddi4+0x134>

1a0019cc <__aeabi_idiv0>:
1a0019cc:	4770      	bx	lr
1a0019ce:	bf00      	nop

1a0019d0 <memset>:
1a0019d0:	4402      	add	r2, r0
1a0019d2:	4603      	mov	r3, r0
1a0019d4:	4293      	cmp	r3, r2
1a0019d6:	d100      	bne.n	1a0019da <memset+0xa>
1a0019d8:	4770      	bx	lr
1a0019da:	f803 1b01 	strb.w	r1, [r3], #1
1a0019de:	e7f9      	b.n	1a0019d4 <memset+0x4>
1a0019e0:	08040201 	.word	0x08040201
1a0019e4:	0f0f0f03 	.word	0x0f0f0f03
1a0019e8:	000000ff 	.word	0x000000ff

1a0019ec <periph_to_base>:
1a0019ec:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0019fc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001a0c:	000100e0 01000100 01200003 00060120     .......... . ...
1a001a1c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001a2c:	01820013 00120182 01a201a2 01c20011     ................
1a001a3c:	001001c2 01e201e2 0202000f 000e0202     ................
1a001a4c:	02220222 0223000d 001c0223              "."...#.#...

1a001a58 <InitClkStates>:
1a001a58:	00010100 00010909 0001090a 01010701     ................
1a001a68:	00010902 00010906 0101090c 0001090d     ................
1a001a78:	0001090e 0001090f 00010910 00010911     ................
1a001a88:	00010912 00010913 00011114 00011119     ................
1a001a98:	0001111a 0001111b                       ........

1a001aa0 <UART_BClock>:
1a001aa0:	01a201c2 01620182                       ......b.

1a001aa8 <UART_PClock>:
1a001aa8:	00820081 00a200a1                       ........

1a001ab0 <ExtRateIn>:
1a001ab0:	00000000                                ....

1a001ab4 <OscRateIn>:
1a001ab4:	00b71b00                                ....

1a001ab8 <gpioLEDBits>:
1a001ab8:	0b010e00 00050c01 02050105              ............

1a001ac4 <InitClkStates>:
1a001ac4:	00010308 00010307 01010f01              ............

1a001ad0 <pinmuxing>:
1a001ad0:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a001ae0:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a001af0:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a001b00:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a001b10:	00f71001 00f31101 00b31201 00f01301     ................
1a001b20:	00b31401 00b60707 00f20000 00b60100     ................

1a001b30 <gpioPinsConfig>:
1a001b30:	02000104 00050701 05010d03 04080100     ................
1a001b40:	02020002 02000304 00000403 04070002     ................
1a001b50:	030c0300 09050402 05040103 04030208     ................
1a001b60:	04020305 06040504 0802000c 03000b06     ................
1a001b70:	00090607 07060503 060f0504 03030004     ................
1a001b80:	02000404 00050404 06040502 04060200     ................
1a001b90:	0c050408 05040a04 0003010e 14010a00     ................
1a001ba0:	010f0000 0d000012 00001101 0010010c     ................
1a001bb0:	07070300 000f0300 01000001 00000000     ................
1a001bc0:	000a0600 08060603 06100504 04030005     ................
1a001bd0:	03000106 04090400 04010d05 010b0000     ................
1a001be0:	0200000f 00000001 00010104 02010800     ................
1a001bf0:	01090000 09010006 05040002 04010200     ................
1a001c00:	02020105 02020504 0e00000a 01000b02     ................
1a001c10:	000c020b 00040c01 04000200 01020001     ................
1a001c20:	02000204 00030402 03070302 070b0300     ................
1a001c30:	0c030004 03000507 0006070d 01020e03     ................
1a001c40:	04010504 06020006 02000504 00040405     ................
1a001c50:	08040402 040c0504 0d050409 05040a04     ................
1a001c60:	0005010e ffff0801                       ........
